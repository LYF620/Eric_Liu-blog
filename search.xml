<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Antd-Form 渲染问题</title>
      <link href="/2022/05/18/antd-form-xuan-ran-wen-ti/"/>
      <url>/2022/05/18/antd-form-xuan-ran-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="Form-item-onChange-事件导致重新渲染问题"><a href="#Form-item-onChange-事件导致重新渲染问题" class="headerlink" title="Form.item onChange 事件导致重新渲染问题"></a>Form.item onChange 事件导致重新渲染问题</h1><p>case 1:当渲染了多个 Form.Item 时，现象如下：<img src="/antd/slow.gif" alt="slow"></p><p>case 2:当渲染了单个 Form.Item 时，现象如下：<img src="/antd/quick.gif" alt="quick"></p><p>结合 performance 查看，当更新某一个 Form.item 时，触发了整个 Form 的更新重绘，下图是一个 Item 的更新栈：<br><img src="/antd/%E6%88%AA%E5%B1%8F2021-12-03_16.09.11.png" alt="截屏2021-12-03_16.09.11"></p><p>根据 antd 文档的说法，form.Item 存在属性 shouldUpdate，可以控制组件是否更新</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>Item  shouldUpdate<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>prevValues<span class="token punctuation">,</span> curValues<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>    prevValues<span class="token punctuation">.</span>additional <span class="token operator">!==</span> curValues<span class="token punctuation">.</span>additional  <span class="token punctuation">}</span><span class="token operator">></span>  <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>Item name<span class="token operator">=</span><span class="token string">"other"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Input <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token punctuation">.</span>Item<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token punctuation">.</span>Item<span class="token operator">></span></code></pre><p>当 shouldUpdate 为 true 时，Form 的任意变化都会使该 Form.Item 重新渲染。反之，设置为 false 时，即不会触发更新<br>现象如下：<img src="/antd/shouldUpdate-true.gif" alt="shouldUpdate-true"></p><p>图中可以看到，这次更新只耗费了 14ms，并只存在一次更新，更新了当前点击的 switch 组件</p><p>引用 Antd 原文：</p><h2 id="shouldUpdate"><a href="#shouldUpdate" class="headerlink" title="shouldUpdate"></a>shouldUpdate</h2><p>Form 通过增量更新方式，只更新被修改的字段相关组件以达到性能优化目的。大部分场景下，你只需要编写代码或者与 dependencies 属性配合校验即可。而在某些特定场景，例如修改某个字段值后出现新的字段选项、或者纯粹希望表单任意变化都对某一个区域进行渲染。你可以通过 shouldUpdate 修改 Form.Item 的更新逻辑。</p><p>当 shouldUpdate 为 true 时，Form 的任意变化都会使该 Form.Item 重新渲染。这对于自定义渲染一些区域十分有帮助：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>Item shouldUpdate<span class="token operator">></span>  <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>pre<span class="token operator">></span><span class="token punctuation">{</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>form<span class="token punctuation">.</span><span class="token function">getFieldsValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>pre<span class="token operator">></span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token punctuation">.</span>Item<span class="token operator">></span></code></pre><p>当 shouldUpdate 为方法时，表单的每次数值更新都会调用该方法，提供原先的值与当前的值以供你比较是否需要更新。这对于是否根据值来渲染额外字段十分有帮助：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>Item  shouldUpdate<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>prevValues<span class="token punctuation">,</span> curValues<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>    prevValues<span class="token punctuation">.</span>additional <span class="token operator">!==</span> curValues<span class="token punctuation">.</span>additional  <span class="token punctuation">}</span><span class="token operator">></span>  <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>Item name<span class="token operator">=</span><span class="token string">"other"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Input <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token punctuation">.</span>Item<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token punctuation">.</span>Item<span class="token operator">></span></code></pre><p>开发时，合理运用 shouldUpdate 即可避免无效更新，优化用户体验</p><p>附上 demo：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Form<span class="token punctuation">,</span> Input<span class="token punctuation">,</span> Button<span class="token punctuation">,</span> Space<span class="token punctuation">,</span> Select<span class="token punctuation">,</span> Checkbox<span class="token punctuation">,</span> Switch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> MinusCircleOutlined<span class="token punctuation">,</span> PlusOutlined <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@ant-design/icons'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> areas<span class="token punctuation">,</span> sights<span class="token punctuation">,</span> StyledLayout <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./StyleLayout'</span><span class="token keyword">const</span> <span class="token punctuation">{</span> Option <span class="token punctuation">}</span> <span class="token operator">=</span> Select<span class="token keyword">const</span> AntForm <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">AntForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>form<span class="token punctuation">]</span> <span class="token operator">=</span> Form<span class="token punctuation">.</span><span class="token function">useForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> onFinish <span class="token operator">=</span> <span class="token punctuation">(</span>values<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Received values of form:'</span><span class="token punctuation">,</span> values<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> handleChange <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    form<span class="token punctuation">.</span><span class="token function">setFieldsValue</span><span class="token punctuation">(</span><span class="token punctuation">{</span> sights<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span><span class="token operator">></span>      <span class="token operator">&lt;</span>StyledLayout<span class="token operator">></span>        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>h1<span class="token operator">></span>Welcome to React<span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>          <span class="token operator">&lt;</span>Form            form<span class="token operator">=</span><span class="token punctuation">{</span>form<span class="token punctuation">}</span>            name<span class="token operator">=</span><span class="token string">"dynamic_form_nest_item"</span>            onFinish<span class="token operator">=</span><span class="token punctuation">{</span>onFinish<span class="token punctuation">}</span>            autoComplete<span class="token operator">=</span><span class="token string">"off"</span>          <span class="token operator">></span>            <span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>Item              name<span class="token operator">=</span><span class="token string">"area"</span>              shouldUpdate<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span>              label<span class="token operator">=</span><span class="token string">"Area"</span>              rules<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token punctuation">{</span> required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">'Missing area'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span>            <span class="token operator">></span>              <span class="token operator">&lt;</span>Select options<span class="token operator">=</span><span class="token punctuation">{</span>areas<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span>handleChange<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token punctuation">.</span>Item<span class="token operator">></span>            <span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>List name<span class="token operator">=</span><span class="token string">"sights"</span><span class="token operator">></span>              <span class="token punctuation">{</span><span class="token punctuation">(</span>fields<span class="token punctuation">,</span> <span class="token punctuation">{</span> add<span class="token punctuation">,</span> remove <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>                <span class="token operator">&lt;</span><span class="token operator">></span>                  <span class="token punctuation">{</span>fields<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>                    <span class="token operator">&lt;</span>Space key<span class="token operator">=</span><span class="token punctuation">{</span>field<span class="token punctuation">.</span>key<span class="token punctuation">}</span> align<span class="token operator">=</span><span class="token string">"baseline"</span><span class="token operator">></span>                      <span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>Item                        noStyle                        shouldUpdate<span class="token operator">=</span><span class="token punctuation">{</span>                          <span class="token boolean">false</span>                          <span class="token comment" spellcheck="true">//   prevValues.area !== curValues.area ||</span>                          <span class="token comment" spellcheck="true">//   prevValues.sights !== curValues.sights</span>                        <span class="token punctuation">}</span>                      <span class="token operator">></span>                        <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>                          <span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>Item                            <span class="token punctuation">{</span><span class="token operator">...</span>field<span class="token punctuation">}</span>                            shouldUpdate<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span>                            label<span class="token operator">=</span><span class="token string">"Sight"</span>                            name<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span>field<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">'sight'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>                            fieldKey<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span>field<span class="token punctuation">.</span>fieldKey<span class="token punctuation">,</span> <span class="token string">'sight'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>                          <span class="token operator">></span>                            <span class="token operator">&lt;</span>Select                              <span class="token comment" spellcheck="true">//   disabled={!form.getFieldValue('area')}</span>                              style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> width<span class="token punctuation">:</span> <span class="token number">130</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>                            <span class="token operator">></span>                              <span class="token punctuation">{</span><span class="token punctuation">[</span>                                <span class="token string">'Tiananmen'</span><span class="token punctuation">,</span>                                <span class="token string">'Great Wall'</span><span class="token punctuation">,</span>                                <span class="token string">'Oriental Pearl'</span><span class="token punctuation">,</span>                                <span class="token string">'The Bund'</span><span class="token punctuation">,</span>                              <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>                                <span class="token operator">&lt;</span>Option key<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span> value<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token operator">></span>                                  <span class="token punctuation">{</span>item<span class="token punctuation">}</span>                                <span class="token operator">&lt;</span><span class="token operator">/</span>Option<span class="token operator">></span>                              <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>                            <span class="token operator">&lt;</span><span class="token operator">/</span>Select<span class="token operator">></span>                          <span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token punctuation">.</span>Item<span class="token operator">></span>                        <span class="token punctuation">)</span><span class="token punctuation">}</span>                      <span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token punctuation">.</span>Item<span class="token operator">></span>                      <span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>Item                        shouldUpdate<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span>                        <span class="token punctuation">{</span><span class="token operator">...</span>field<span class="token punctuation">}</span>                        label<span class="token operator">=</span><span class="token string">"Price"</span>                        name<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span>field<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">'price'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>                        fieldKey<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span>field<span class="token punctuation">.</span>fieldKey<span class="token punctuation">,</span> <span class="token string">'price'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>                      <span class="token operator">></span>                        <span class="token operator">&lt;</span>Input <span class="token operator">/</span><span class="token operator">></span>                      <span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token punctuation">.</span>Item<span class="token operator">></span>                      <span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>Item                        <span class="token punctuation">{</span><span class="token operator">...</span>field<span class="token punctuation">}</span>                        shouldUpdate<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span>                        label<span class="token operator">=</span><span class="token string">"Checkbox"</span>                        name<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span>field<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">'Checkbox'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>                        fieldKey<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span>field<span class="token punctuation">.</span>fieldKey<span class="token punctuation">,</span> <span class="token string">'Checkbox'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>                      <span class="token operator">></span>                        <span class="token operator">&lt;</span>Checkbox <span class="token operator">/</span><span class="token operator">></span>                      <span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token punctuation">.</span>Item<span class="token operator">></span>                      <span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>Item                        <span class="token punctuation">{</span><span class="token operator">...</span>field<span class="token punctuation">}</span>                        shouldUpdate<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span>                        label<span class="token operator">=</span><span class="token string">"Checkbox1"</span>                        name<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span>field<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">'Checkbox1'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>                        fieldKey<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span>field<span class="token punctuation">.</span>fieldKey<span class="token punctuation">,</span> <span class="token string">'Checkbox1'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>                      <span class="token operator">></span>                        <span class="token operator">&lt;</span>Checkbox <span class="token operator">/</span><span class="token operator">></span>                      <span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token punctuation">.</span>Item<span class="token operator">></span>                      <span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>Item                        shouldUpdate<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span>                        <span class="token punctuation">{</span><span class="token operator">...</span>field<span class="token punctuation">}</span>                        label<span class="token operator">=</span><span class="token string">"Checkbox2"</span>                        name<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span>field<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">'Checkbox2'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>                        fieldKey<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span>field<span class="token punctuation">.</span>fieldKey<span class="token punctuation">,</span> <span class="token string">'Checkbox2'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>                      <span class="token operator">></span>                        <span class="token operator">&lt;</span>Checkbox <span class="token operator">/</span><span class="token operator">></span>                      <span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token punctuation">.</span>Item<span class="token operator">></span>                      <span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>Item                        <span class="token punctuation">{</span><span class="token operator">...</span>field<span class="token punctuation">}</span>                        shouldUpdate<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span>                        label<span class="token operator">=</span><span class="token string">"Switch"</span>                        name<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span>field<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">'Switch'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>                        fieldKey<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span>field<span class="token punctuation">.</span>fieldKey<span class="token punctuation">,</span> <span class="token string">'Switch'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>                      <span class="token operator">></span>                        <span class="token operator">&lt;</span>Switch <span class="token operator">/</span><span class="token operator">></span>                      <span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token punctuation">.</span>Item<span class="token operator">></span>                      <span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>Item                        shouldUpdate<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span>                        <span class="token punctuation">{</span><span class="token operator">...</span>field<span class="token punctuation">}</span>                        label<span class="token operator">=</span><span class="token string">"Switch1"</span>                        name<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span>field<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">'Switch1'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>                        fieldKey<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span>field<span class="token punctuation">.</span>fieldKey<span class="token punctuation">,</span> <span class="token string">'Switch1'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>                      <span class="token operator">></span>                        <span class="token operator">&lt;</span>Switch <span class="token operator">/</span><span class="token operator">></span>                      <span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token punctuation">.</span>Item<span class="token operator">></span>                      <span class="token operator">&lt;</span>MinusCircleOutlined onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">remove</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>Space<span class="token operator">></span>                  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>                  <span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>Item<span class="token operator">></span>                    <span class="token operator">&lt;</span>Button                      type<span class="token operator">=</span><span class="token string">"dashed"</span>                      onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                        <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                      <span class="token punctuation">}</span><span class="token punctuation">}</span>                      block                      icon<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>PlusOutlined <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">}</span>                    <span class="token operator">></span>                      Add sights                    <span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>                  <span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token punctuation">.</span>Item<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>              <span class="token punctuation">)</span><span class="token punctuation">}</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token punctuation">.</span>List<span class="token operator">></span>            <span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>Item<span class="token operator">></span>              <span class="token operator">&lt;</span>Button type<span class="token operator">=</span><span class="token string">"primary"</span> htmlType<span class="token operator">=</span><span class="token string">"submit"</span><span class="token operator">></span>                Submit              <span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token punctuation">.</span>Item<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>StyledLayout<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> AntForm</code></pre>]]></content>
      
      
      <categories>
          
          <category> Antd Design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> react源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vite2.0+react 使用教程</title>
      <link href="/2021/08/07/shi-yong-jiao-cheng/"/>
      <url>/2021/08/07/shi-yong-jiao-cheng/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Vite2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vite2.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React源码学习笔记（三）—— Fiber的实现原理</title>
      <link href="/2021/06/30/react-yuan-ma-xue-xi-3/"/>
      <url>/2021/06/30/react-yuan-ma-xue-xi-3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="40d9ef1a3310ecc85c38df80b291c01f0deb3a40eaa3f08c5d6536336d5fafb8"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码，查看文章</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> react源码学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> react源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React源码学习笔记（二）—— Fiber的心智模型</title>
      <link href="/2021/06/28/react-yuan-ma-xue-xi-2/"/>
      <url>/2021/06/28/react-yuan-ma-xue-xi-2/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="08a5bcfbe6020d0dad435cccc98e1da50df6bd2bac5bd96d27c56bd5a4aee9d7"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码，查看文章</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> react源码学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> react源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React源码学习笔记（一）—— React理念</title>
      <link href="/2021/06/25/react-yuan-ma-xue-xi-1/"/>
      <url>/2021/06/25/react-yuan-ma-xue-xi-1/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="9c26854f0583b7cae2e31ad46185eb5cfc93bcf17ed82266c1d216fed2f6858c"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码，查看文章</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> react源码学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> react源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mobx最佳实践-By Eric</title>
      <link href="/2021/04/28/mobx-zui-jia-shi-jian-by-eric/"/>
      <url>/2021/04/28/mobx-zui-jia-shi-jian-by-eric/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="0bf44b4d79ac00808bb833d0847613c7ba44d2cb96eef0c9245646516ad6d369"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码，查看文章</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Mobx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mobx </tag>
            
            <tag> 状态机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mobx—工作时间减半，快乐加倍！</title>
      <link href="/2021/04/27/mobx-geng-qing-shuang-de-zhuang-tai-guan-li/"/>
      <url>/2021/04/27/mobx-geng-qing-shuang-de-zhuang-tai-guan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是-Mobx"><a href="#什么是-Mobx" class="headerlink" title="什么是 Mobx"></a>什么是 Mobx</h1><p>MobX 通过透明的函数响应式编程(transparently applying functional reactive programming - TFRP)使得状态管理变得简单和可扩展。他的响应原则是：</p><blockquote><p>任何源自应用状态的东西都应该自动地获得。</p></blockquote><p><img src="/meme/mobx-flow.png" alt="Eric 真帅!"></p><p>React 结合 Mobx 开发的话，个人感觉相比于 Redux 来说，清爽了很多。React 通过提供机制把应用状态转换为可渲染组件树并对其进行渲染。而 MobX 提供机制来存储和更新应用状态供 React 使用。对于应用开发中的常见问题，React 和 MobX 都提供了最优和独特的解决方案。React 提供了优化 UI 渲染的机制， 这种机制就是通过使用虚拟 DOM 来减少昂贵的 DOM 变化的数量。MobX 提供了优化应用状态与 React 组件同步的机制，这种机制就是使用响应式虚拟依赖状态图表，它只有在真正需要的时候才更新并且永远保持是最新的。</p><h1 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h1><h2 id="Observable-state-可观察的状态"><a href="#Observable-state-可观察的状态" class="headerlink" title="Observable state(可观察的状态)"></a>Observable state(可观察的状态)</h2><p>MobX 为现有的数据结构(如对象，数组和类实例)添加了可观察的功能。<br>通过使用 @observable 装饰器(ES.Next)来给你的类属性添加注解就可以简单地完成这一切。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> observable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'mobx'</span><span class="token keyword">class</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>  id <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  @observable title <span class="token operator">=</span> <span class="token string">''</span>  @observable finished <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">}</span></code></pre><p>observable 的对象不仅可以是基本类型，还可以是引用值，比如对象或数组</p><h2 id="Computed-values-计算值"><a href="#Computed-values-计算值" class="headerlink" title="Computed values(计算值)"></a>Computed values(计算值)</h2><p>使用 MobX， 你可以定义在相关数据发生变化时自动更新的值。<br>通过@computed 装饰器或者利用 (extend)Observable 时调用 的 getter / setter 函数来进行使用。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">TodoList</span> <span class="token punctuation">{</span>  @observable todos <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  @computed <span class="token keyword">get</span> <span class="token function">unfinishedTodoCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>todo<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">!</span>todo<span class="token punctuation">.</span>finished<span class="token punctuation">)</span><span class="token punctuation">.</span>length  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>当添加了一个新的 todo 或者某个 todo 的 finished 属性发生变化时，MobX 会确保 unfinishedTodoCount 自动更新。</p><h2 id="Reactions-自定义反应"><a href="#Reactions-自定义反应" class="headerlink" title="Reactions(自定义反应)"></a>Reactions(自定义反应)</h2><p>Reactions 和计算值很像，但它不是产生一个新的值，而是会产生一些副作用，比如打印到控制台、网络请求、递增地更新 React 组件树以修补 DOM、等等。 简而言之，reactions 在 响应式编程和命令式编程之间建立沟通的桥梁。</p><blockquote><p>自定义 reactions<br>使用 autorun、reaction 和 when 函数即可简单的创建自定义 reactions(autorun、reaction 和 when 可在<a href="https://cn.mobx.js.org/refguide/computed-decorator.html" title="https://cn.mobx.js.org/refguide/computed-decorator.html">官方文档</a>查看)。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token function">autorun</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Tasks left: '</span> <span class="token operator">+</span> todos<span class="token punctuation">.</span>unfinishedTodoCount<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="React-组件"><a href="#React-组件" class="headerlink" title="React 组件"></a>React 组件</h2><p>如果你用 React 的话，可以把你的(无状态函数)组件变成响应式组件，方法是在组件上添加 observer 函数/ 装饰器. observer 由 mobx-react 包提供的。observer 会将 React (函数)组件转换为它们需要渲染的数据的衍生。<br>使用 MobX 时没有所谓的智能和无脑组件。 所有的组件都会以巧妙的方式进行渲染，而只需要一种简单无脑的方式来定义它们，MobX 会确保组件总是在需要的时重新渲染。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> observer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'mobx-react'</span>@observer<span class="token keyword">class</span> <span class="token class-name">TodoListView</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>ul<span class="token operator">></span>          <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>todoList<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>todo<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>TodoView todo<span class="token operator">=</span><span class="token punctuation">{</span>todo<span class="token punctuation">}</span> key<span class="token operator">=</span><span class="token punctuation">{</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>          <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>        Tasks left<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>todoList<span class="token punctuation">.</span>unfinishedTodoCount<span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> TodoView <span class="token operator">=</span> <span class="token function">observer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> todo <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span>input      type<span class="token operator">=</span><span class="token string">"checkbox"</span>      checked<span class="token operator">=</span><span class="token punctuation">{</span>todo<span class="token punctuation">.</span>finished<span class="token punctuation">}</span>      onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>todo<span class="token punctuation">.</span>finished <span class="token operator">=</span> <span class="token operator">!</span>todo<span class="token punctuation">.</span>finished<span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token operator">/</span><span class="token operator">></span>    <span class="token punctuation">{</span>todo<span class="token punctuation">.</span>title<span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TodoList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>TodoListView todoList<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'mount'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="MobX-会对什么作出响应"><a href="#MobX-会对什么作出响应" class="headerlink" title="MobX 会对什么作出响应"></a>MobX 会对什么作出响应</h2><p>个人理解是对任何通过 Mobx 函数调用到应用数据（被 observer 的属性）的任何地方，都会做出响应</p><blockquote><p>MobX 会对在执行跟踪函数期间读取的任何现有的可观察属性做出反应。</p></blockquote><ul><li>“读取” 是对象属性的间接引用，可以用过 . (例如 user.name) 或者 [] (例如 user[‘name’]) 的形式完成。</li><li>“追踪函数” 是 computed 表达式、observer 组件的 render() 方法和 when、reaction 和 autorun 的第一个入参函数。</li><li>“过程(during)” 意味着只追踪那些在函数执行时被读取的 observable 。这些值是否由追踪函数直接或间接使用并不重要。</li></ul><p>换句话说，MobX 不会对其作出反应:</p><ul><li>从 observable 获取的值，但是在追踪函数之外</li><li>在异步调用的代码块中读取的 observable</li></ul><h1 id="Mobx-的优势"><a href="#Mobx-的优势" class="headerlink" title="Mobx 的优势"></a>Mobx 的优势</h1><h2 id="简单且可扩展"><a href="#简单且可扩展" class="headerlink" title="简单且可扩展"></a>简单且可扩展</h2><p>MobX 是状态管理库中侵入性最小的之一。这使得 MobX 的方法不但简单，而且可扩展性也非常好:</p><h2 id="使用类和真正的引用"><a href="#使用类和真正的引用" class="headerlink" title="使用类和真正的引用"></a>使用类和真正的引用</h2><p>使用 MobX 不需要使数据标准化。这使得库十分适合那些异常复杂的领域模型<br>PS：Mobx 以类的方式管理应用数据，方便快捷，易理解易操作，终极轻量香喷喷！</p><h2 id="保证参照完整性"><a href="#保证参照完整性" class="headerlink" title="保证参照完整性"></a>保证参照完整性</h2><p>因为数据不需要标准化，所以 MobX 会自动跟踪状态和衍生之间的关系，你可以免费获得参照完整性。渲染通过三级间接寻址访问的数据？<br>没有问题，MobX 会跟踪它们，一旦其中一个引用发生了变化，就会重新渲染。作为回报，陈年的老 bug 已不复存在。作为一个程序员，你可能记不住修改的一些数据可能会影响到的某个角落里看起来毫不相关的组件，但 MobX 不会。</p><h2 id="更简单的-actions-更便于维护"><a href="#更简单的-actions-更便于维护" class="headerlink" title="更简单的 actions 更便于维护"></a>更简单的 actions 更便于维护</h2><p>使用 MobX 修改状态是非常简单的。你只需简单的写出你的目的。MobX 会替你处理好剩下的事情。</p><h2 id="高效的细粒度的可观测性"><a href="#高效的细粒度的可观测性" class="headerlink" title="高效的细粒度的可观测性"></a>高效的细粒度的可观测性</h2><p>MobX 会构建应用中所有衍生的图形，以找到保持最新状态所需的重新计算的最少次数。“衍生一切”或许听上去开销很昂贵，但 MobX 构建虚拟衍生图以保持衍生与状态同步所需的重计算的数量最小化。<br>简单来说，是因为 MobX 会在数据上建立更细粒度的“监听器”，而不是通过程序来控制。<br>MobX 看到衍生之间的因果关系，因此它可以为衍生排序，使得衍生不会运行多次或引入缺陷<br>详情可参考<a href="https://medium.com/hackernoon/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254" title="https://medium.com/hackernoon/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254">深入剖析 MobX</a></p><h2 id="易操作性"><a href="#易操作性" class="headerlink" title="易操作性"></a>易操作性</h2><p>MobX 使用原生 javascript 。由于它的侵入性不强，它可以和绝大部分 javascript 库共同使用，而不需要特定的 MobX 风格库。<br>所以你可以继续使用你的路由，数据获取和工具库，比如 react-router、 director、 superagent、 lodash，等等。<br>出于同样的原因，你可以在服务器端和客户端使用它，也可以在 react-native 这样的同构应用中使用。<br>结论就是: 相比其它状态管理解决方案，当使用 MobX 时通常只需学习更少的新概念。</p><h1 id="使用-Mobx，工作时间减半，快乐加倍"><a href="#使用-Mobx，工作时间减半，快乐加倍" class="headerlink" title="使用 Mobx，工作时间减半，快乐加倍"></a>使用 Mobx，工作时间减半，快乐加倍</h1><h1 id="它真的超级简单、超级快！棒极了！千万不要错过！"><a href="#它真的超级简单、超级快！棒极了！千万不要错过！" class="headerlink" title="它真的超级简单、超级快！棒极了！千万不要错过！"></a>它真的超级简单、超级快！棒极了！千万不要错过！</h1>]]></content>
      
      
      <categories>
          
          <category> Mobx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mobx </tag>
            
            <tag> 状态机 </tag>
            
            <tag> 快乐星球 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>require &amp;&amp; import</title>
      <link href="/2021/04/26/require-import/"/>
      <url>/2021/04/26/require-import/</url>
      
        <content type="html"><![CDATA[<h2 id="CommonJS-modules"><a href="#CommonJS-modules" class="headerlink" title="CommonJS modules"></a>CommonJS modules</h2><p>Module 既可以是客户端，也可以是服务器端，安全的或不安全的，可以是现在实现的，也可以是将来使用语法扩展的系统支持的</p><h3 id="Module-上下文"><a href="#Module-上下文" class="headerlink" title="Module 上下文"></a>Module 上下文</h3><ul><li>在一个模块中，有一个自由变量“require”，它是一个函数。<ul><li>require 函数接受一个模块标识符</li><li>require 返回外部 module 导出的 API</li><li>如果存在一个依赖循环，当外部 module 的一个传递依赖项需要它时，它可能还没有完成执行;在这种情况下，如果想要 module 执行，”require”返回的对象必须至少包含外部模块在调用 require(导致当前 module 执行)之前所需的导出。</li><li>如果一个 module 不能被导出，requie 必定报错</li></ul></li><li>在一个 module 中，有一个自由变量称之为 export，这是一个对象，module 在执行时可以向其添加 API</li><li>module 必须使用 exports 对象作为导出的唯一方法</li></ul><h3 id="module-标识符"><a href="#module-标识符" class="headerlink" title="module 标识符"></a>module 标识符</h3><ul><li>标识符是由正斜杠分隔的一串术语<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> Square <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./square.js'</span><span class="token punctuation">)</span></code></pre></li><li>A term must be a camelCase identifier, “.”, or “..”.</li><li>module 标识符可能没有像”.js”这样的文件扩展名。</li><li>模块标识符可以是“相对的”或“顶级的”。如果第一项是’.’或“..”，则模块标识符是“相对的”</li><li>顶级标识符从概念模块的命名空间根解析</li><li>相对标识符相对于编写和调用“require”的模块的标识符进行解析。</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// math.js</span>exports<span class="token punctuation">.</span>add <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    args <span class="token operator">=</span> arguments<span class="token punctuation">,</span>    l <span class="token operator">=</span> args<span class="token punctuation">.</span>length  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>    sum <span class="token operator">+</span><span class="token operator">=</span> args<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> sum<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// increment.js</span><span class="token keyword">var</span> add <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'math'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>addexports<span class="token punctuation">.</span>increment <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// program.js</span><span class="token keyword">var</span> inc <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'increment'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>increment<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token function">inc</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2</span></code></pre><h2 id="ES2015-import"><a href="#ES2015-import" class="headerlink" title="ES2015 import"></a>ES2015 import</h2><p>静态的 import 语句用于导入由另一个模块导出的绑定。无论是否声明了 strict mode ，导入的模块都运行在严格模式下。在浏览器中，import 语句只能在声明了 type=”module” 的 script 的标签中使用。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// module-name 要导入的模块。通常是包含目标模块的.js文件的相对或绝对路径名，可以不包括.js扩展名</span><span class="token comment" spellcheck="true">// defaultExport 导入模块的默认导出接口的引用名。</span><span class="token keyword">import</span> defaultExport <span class="token keyword">from</span> <span class="token string">"module-name"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// name 导入模块对象整体的别名，在引用导入模块时，它将作为一个命名空间来使用。</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> name <span class="token keyword">from</span> <span class="token string">"module-name"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// export, exportN 被导入模块的导出接口的名称。</span><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token keyword">export</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"module-name"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> export1<span class="token punctuation">,</span> export2 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"module-name"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// alias, aliasN 将引用指定的导入的名称。</span><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token keyword">export</span> <span class="token keyword">as</span> alias <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"module-name"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> export1 <span class="token punctuation">,</span> export2 <span class="token keyword">as</span> alias2 <span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"module-name"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 整个模块仅为副作用（中性词，无贬义含义）而导入，而不导入模块中的任何内容（接口）</span><span class="token comment" spellcheck="true">// 这将运行模块中的全局代码, 但实际上不导入任何值</span><span class="token keyword">import</span> <span class="token string">'/modules/my-module.js'</span><span class="token punctuation">;</span></code></pre><p>此外，还有一个类似函数的动态 import()，它不需要依赖 type=”module” 的 script 标签。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> promise <span class="token operator">=</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'module-name'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//这是一个处于第三阶段的提案。</span></code></pre><p>将 myModule 插入当前作用域，其中包含来自位于/modules/my-module.js 文件中导出的所有接口</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> myModule <span class="token keyword">from</span> <span class="token string">'/modules/my-module.js'</span></code></pre><p>访问导出接口意味着使用模块名称（在本例为“myModule”）作为命名空间。例如，如果上面导入的模块包含一个接口 doAllTheAmazingThings()，你可以这样调用：</p><pre class=" language-js"><code class="language-js">myModule<span class="token punctuation">.</span><span class="token function">doAllTheAmazingThings</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="动态-import"><a href="#动态-import" class="headerlink" title="动态 import"></a>动态 import</h3><p>标准用法的 import 导入的模块是静态的，会使所有被导入的模块，在加载时就被编译（无法做到按需编译，降低首页加载速度）<br>有些场景中，你可能希望根据条件导入模块或者按需导入模块，这时你可以使用动态导入代替静态导入。下面的是你可能会需要动态导入的场景：</p><ul><li>当静态导入的模块很明显的降低了代码的加载速度且被使用的可能性很低，或者并不需要马上使用它</li><li>当静态导入的模块很明显的占用了大量系统内存且被使用的可能性很低</li><li>当被导入的模块，在加载时并不存在，需要异步获取</li><li>当导入模块的说明符，需要动态构建。（静态导入只能使用静态说明符）</li><li>当被导入的模块有副作用（这里说的副作用，可以理解为模块中会直接运行的代码），这些副作用只有在触发了某些条件才被需要时。（原则上来说，模块不能有副作用，但是很多时候，你无法控制你所依赖的模块的内容）</li></ul><p>关键字 import 可以像调用函数一样来动态的导入模块。以这种方式调用，将返回一个 promise</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'/modules/my-module.js'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Do something with the module.</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 这种使用方式也支持 await 关键字</span><span class="token keyword">let</span> module <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'/modules/my-module.js'</span><span class="token punctuation">)</span></code></pre><p>标准导入方案：<br>下面的代码将会演示如何从辅助模块导入以协助处理 AJAX JSON 请求</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// file.js</span><span class="token keyword">function</span> <span class="token function">getJSON</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  xhr<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getUsefulContents</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">getJSON</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">callback</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// main.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> getUsefulContents <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'/modules/file.js'</span><span class="token function">getUsefulContents</span><span class="token punctuation">(</span><span class="token string">'http://www.example.com'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">doSomethingUseful</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>动态导入方案：<br>此示例展示了如何基于用户操作去加载功能模块到页面上，在例子中通过点击按钮，然后会调用模块内的函数。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> main <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'main'</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> link <span class="token keyword">of</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'nav > a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  link<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'/modules/my-module.js'</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        module<span class="token punctuation">.</span><span class="token function">loadPageInto</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        main<span class="token punctuation">.</span>textContent <span class="token operator">=</span> err<span class="token punctuation">.</span>message      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="css-sass-less-文件中的-import-语句"><a href="#css-sass-less-文件中的-import-语句" class="headerlink" title="css/sass/less 文件中的 @import 语句"></a>css/sass/less 文件中的 @import 语句</h2><p>@import CSS@规则，用于从其他样式表导入样式规则。这些规则必须先于所有其他类型的规则加载<br>用户代理可以避免为不支持的媒体类型检索资源，作者可以指定依赖媒体的@import 规则。这些条件导入在 URI 之后指定逗号分隔的媒体查询。在没有任何媒体查询的情况下，导入是无条件的。指定所有的媒体具有相同的效果。</p><blockquote><p>语法</p><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@import</span> url<span class="token punctuation">;</span></span><span class="token atrule"><span class="token rule">@import</span> url list-of-media-queries<span class="token punctuation">;</span></span></code></pre><p>url:是一个表示要引入资源位置的 <string> 或者 <uri> (en-US) 。 这个 URL 可以是绝对路径或者相对路径。 要注意的是这个 URL 不需要指明一个文件； 可以只指明包名，然后合适的文件会被自动选择<br>list-of-media-queries:是一个逗号分隔的 媒体查询 条件列表，决定通过 URL 引入的 CSS 规则 在什么条件下应用。如果浏览器不支持列表中的任何一条媒体查询条件，就不会引入 URL 指明的 CSS 文件</uri></string></p></blockquote><p>示例</p><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@import</span> <span class="token url">url('fineprint.css')</span> print<span class="token punctuation">;</span></span><span class="token atrule"><span class="token rule">@import</span> <span class="token string">'custom.css'</span><span class="token punctuation">;</span></span><span class="token atrule"><span class="token rule">@import</span> <span class="token url">url('chrome://communicator/skin/')</span><span class="token punctuation">;</span></span><span class="token atrule"><span class="token rule">@import</span> <span class="token string">'common.css'</span> screen<span class="token punctuation">;</span></span><span class="token atrule"><span class="token rule">@import</span> <span class="token url">url('landscape.css')</span> screen and <span class="token punctuation">(</span><span class="token property">orientation</span><span class="token punctuation">:</span> landscape<span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECMASCript </tag>
            
            <tag> CommonJS </tag>
            
            <tag> Import </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>巨TM详细的Webpack入门(一)</title>
      <link href="/2021/04/25/webpack-ru-men-yi/"/>
      <url>/2021/04/25/webpack-ru-men-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是-webpack"><a href="#什么是-webpack" class="headerlink" title="什么是 webpack"></a>什么是 webpack</h1><p>webpack 是一个现代 JavaScript 应用程序的静态模块打包器（module bundler）。当 webpack 处理应用程序时，通过递归关系构建一个依赖关系图，其中包含该应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle（bundle 会在下文讲解）。</p><h1 id="entry-入口"><a href="#entry-入口" class="headerlink" title="entry[入口]"></a>entry[入口]</h1><p>入口起点（entry point）指示 webpack 应该使用哪个模块作为构建其内部依赖图的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖。每个依赖项随即被处理，最后输出到称之为 bundles 的文件中.<br>配置 entry，指定一个或多个入口起点，默认值为’./src’<br>用法：entry: string|Array<string></string></p><h2 id="单个入口语法"><a href="#单个入口语法" class="headerlink" title="单个入口语法"></a>单个入口语法</h2><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token string">'./path/to/my/entry/file.js'</span><span class="token punctuation">}</span></code></pre><blockquote><p>当你向 entry 传入一个数组时会发生什么？向 entry 属性传入「文件路径(file path)数组」将创建“多个主入口(multi-main entry)”。在你想要多个依赖文件一起注入，并且将它们的依赖导向(graph)到一个“chunk”时，传入数组的方式就很有用。</p></blockquote><h2 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h2><p>用法：entry: {[entryChunkName: string]: string|Array<string>}</string></p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    app<span class="token punctuation">:</span> <span class="token string">'./src/app.js'</span><span class="token punctuation">,</span>    vendors<span class="token punctuation">:</span> <span class="token string">'./src/vendors.js'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>对象语法会比较繁琐。然而，这是应用程序中定义入口的最可扩展的方式。</p><blockquote><p>“可扩展的 webpack 配置”是指，可重用并且可以与其他配置组合使用。这是一种流行的技术，用于将关注点(concern)从环境(environment)、构建目标(build target)、运行时(runtime)中分离。然后使用专门的工具（如 webpack-merge）将它们合并。</p></blockquote><h2 id="常见场景"><a href="#常见场景" class="headerlink" title="常见场景"></a>常见场景</h2><p>以下列出一些入口配置和它们的实际用例：</p><ul><li><p>分离 应用程序(app) 和 第三方库(vendor) 入口</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    app<span class="token punctuation">:</span> <span class="token string">'./src/app.js'</span><span class="token punctuation">,</span>    vendors<span class="token punctuation">:</span> <span class="token string">'./src/vendors.js'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>webpack 从 app.js 和 vendors.js 开始创建依赖图(dependency graph)。这些依赖图是彼此完全分离、互相独立的（每个 bundle 中都有一个 webpack 引导(bootstrap)）。这种方式比较常见于，只有一个入口起点（不包括 vendor）的单页应用程序(single page application)中。</p><p>此设置允许你使用 CommonsChunkPlugin 从「应用程序 bundle」中提取 vendor 引用(vendor reference) 到 vendor bundle，并把引用 vendor 的部分替换为 <strong>webpack_require</strong>() 调用。如果应用程序 bundle 中没有 vendor 代码，那么你可以在 webpack 中实现被称为长效缓存的通用模式。</p></li><li><p>多页面应用程序</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    pageOne<span class="token punctuation">:</span> <span class="token string">'./src/pageOne/index.js'</span><span class="token punctuation">,</span>    pageTwo<span class="token punctuation">:</span> <span class="token string">'./src/pageTwo/index.js'</span><span class="token punctuation">,</span>    pageThree<span class="token punctuation">:</span> <span class="token string">'./src/pageThree/index.js'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里我们告诉 webpack 需要 3 个独立分离的依赖图（如上面的示例）。<br>在多页应用中，（译注：每当页面跳转时）服务器将为你获取一个新的 HTML 文档。页面重新加载新文档，并且资源被重新下载。然而，这给了我们特殊的机会去做很多事：</p><ul><li>使用 CommonsChunkPlugin 为每个页面间的应用程序共享代码创建 bundle。由于入口起点增多，多页应用能够复用入口起点之间的大量代码/模块，从而可以极大地从这些技术中受益。</li></ul></li></ul><h2 id="context"><a href="#context" class="headerlink" title="context"></a>context</h2><p>webpack 在寻找相对路径的文件时会以 context 为根目录，context 默认为执行启动 webpack 时所在的当前工作目录。如果想改变 context 的默认配置，则可以在配置文件中这样设置：</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  context<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'app'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>注意：context 必须是一个绝对路径的字符串，除此之外，还可以通过在启动 webpack 时带上参数 webpack –context 来设置 context。<br>entry 的路径和其他依赖的模块的路径可能采用相对于 context 的路径来描述，context 会影响到这些相对路径所指向的真实文件。</p><h1 id="出口-output"><a href="#出口-output" class="headerlink" title="出口[output]"></a>出口[output]</h1><p>output 属性告诉 webpack 在哪里输出它所创建的 bundles，以及如何命名这些文件，默认值为 ./dist。基本上，整个应用程序结构，都会被编译到你指定的输出路径的文件夹中。你可以通过在配置中指定一个 output 字段，来配置这些处理过程<br>output 位于对象最顶级键(key)，包括了一组选项，指示 webpack 如何去输出、以及在哪里输出你的「bundle、asset 和其他你所打包或使用 webpack 载入的任何内容」。</p><h2 id="单个入口语法-1"><a href="#单个入口语法-1" class="headerlink" title="单个入口语法"></a>单个入口语法</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token string">'./path/to/my/entry/file.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//path: bundle 生成(emit)到哪里</span>    filename<span class="token punctuation">:</span> <span class="token string">'my-first-webpack.bundle.js'</span>    <span class="token comment" spellcheck="true">//filename: webpack bundle 的名称</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="多个入口语法"><a href="#多个入口语法" class="headerlink" title="多个入口语法"></a>多个入口语法</h2><p>如果配置创建了多个单独的 “chunk”（例如，使用多个入口起点或使用像 CommonsChunkPlugin 这样的插件），则应该使用占位符(substitutions)来确保每个文件具有唯一的名称。</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    app<span class="token punctuation">:</span> <span class="token string">'./src/app.js'</span><span class="token punctuation">,</span>    search<span class="token punctuation">:</span> <span class="token string">'./src/search.js'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'[name].js'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> __dirname <span class="token operator">+</span> <span class="token string">'/dist'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>占位符：</p><blockquote><p>对于单个入口起点，filename 会是一个静态名称。<br>filename: “bundle.js”<br>然而，当通过多个入口起点(entry point)、代码拆分(code splitting)或各种插件(plugin)创建多个 bundle，应该使用以下一种替换方式，来赋予每个 bundle 一个唯一的名称……<br>使用入口名称：<br>filename: “[name].bundle.js”<br>使用内部 chunk id<br>filename: “[id].bundle.js”<br>使用每次构建过程中，唯一的 hash 生成<br>filename: “[name].[hash].bundle.js”<br>使用基于每个 chunk 内容的 hash：<br>filename: “[chunkhash].bundle.js”<br>注意此选项被称为文件名，但是你还是可以使用像 “js/[name]/bundle.js” 这样的文件夹结构。<br>对于这些文件，请使用 output.chunkFilename 选项来控制输出。</p></blockquote></blockquote><p>| 模板 | 描述 |<br>| [hash] | 模块标识符(module identifier)的 hash |<br>| [chunkhash] | chunk 内容的 hash |<br>| [name] | 模块名称 |<br>| [id] | 模块标识符(module identifier) |<br>| [query] | 模块的 query，例如，文件名 ? 后面的字符串 |<br>[hash] 和 [chunkhash] 的长度可以使用 [hash:16]（默认为 20）来指定。或者，通过指定 output.hashDigestLength 在全局配置长度。</p><h3 id="使用-CDN-和资源-hash"><a href="#使用-CDN-和资源-hash" class="headerlink" title="使用 CDN 和资源 hash"></a>使用 CDN 和资源 hash</h3><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token string">'./path/to/my/entry/file.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/home/proj/cdn/assets/[hash]'</span><span class="token punctuation">,</span>    publicPath<span class="token punctuation">:</span> <span class="token string">'http://cdn.example.com/assets/[hash]/'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>在编译时不知道最终输出文件的 publicPath 的情况下，publicPath 可以留空，并且在入口起点文件运行时动态设置。如果你在编译时不知道 publicPath，你可以先忽略它，并且在入口起点设置 <strong>webpack_public_path</strong>。</p></blockquote><pre class=" language-js"><code class="language-js">__webpack_public_path__ <span class="token operator">=</span> myRuntimePublicPath<span class="token comment" spellcheck="true">// 剩余的应用程序入口</span></code></pre><h1 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h1><p>loader 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。本质上，webpack loader 将所有类型的文件，转换为应用程序的依赖图（和最终的 bundle）可以直接引用的模块。</p><blockquote><p>注意，loader 能够 import 导入任何类型的模块（例如 .css 文件），这是 webpack 特有的功能，其他打包程序或任务执行器的可能并不支持。这种语言扩展是有很必要的，因为这可以使开发人员创建出更准确的依赖关系图。</p></blockquote><p>在 webpack 的配置中 loader 有两个目标：</p><ul><li>test 属性，用于标识出应该被对应的 loader 进行转换的某个或某些文件。</li><li>use 属性，表示进行转换时，应该使用哪个 loader。</li></ul><h2 id="loader-的三种使用方式"><a href="#loader-的三种使用方式" class="headerlink" title="loader 的三种使用方式"></a>loader 的三种使用方式</h2><ul><li>配置（最省事）：在 webpack.config.js 文件中指定 loader。</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'my-first-webpack.bundle.js'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> test<span class="token punctuation">:</span> <span class="token regex">/\.txt$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token string">'raw-loader'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> config</code></pre><p>以上配置中，对一个单独的 module 对象定义了 rules 属性，里面包含两个必须属性：test 和 use。这告诉 webpack 编译器(compiler) 如下信息：</p><blockquote><p>“嘿，webpack 编译器，当你碰到「在 require()/import 语句中被解析为 ‘.txt’ 的路径」时，在你对它打包之前，先使用 raw-loader 转换一下。”</p></blockquote><ul><li><p>内联：在每个 import 语句中显式指定 loader。<br>可以在 import 语句或任何等效于 “import” 的方式中指定 loader。使用 ! 将资源中的 loader 分开。分开的每个部分都相对于当前目录解析。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Styles <span class="token keyword">from</span> <span class="token string">'style-loader!css-loader?modules!./styles.css'</span></code></pre><p>通过前置所有规则及使用 !，可以对应覆盖到配置中的任意 loader。<br>选项可以传递查询参数，例如 ?key=value&amp;foo=bar，或者一个 JSON 对象，例如 ?{“key”:”value”,”foo”:”bar”}。</p></li><li><p>CLI：在 shell 命令中指定它们。</p></li></ul><pre class=" language-shell"><code class="language-shell">webpack --module-bind jade-loader --module-bind 'css=style-loader!css-loader'</code></pre><p>这会对 .jade 文件使用 jade-loader，对 .css 文件使用 style-loader 和 css-loader。</p><h2 id="loader-的特性"><a href="#loader-的特性" class="headerlink" title="loader 的特性"></a>loader 的特性</h2><ul><li>loader 支持链式传递。能够对资源使用流水线(pipeline)。一组链式的 loader 将按照相反的顺序执行。loader 链中的第一个 loader 返回值给下一个 loader。在最后一个 loader，返回 webpack 所预期的 JavaScript。</li><li>loader 可以是同步的，也可以是异步的。</li><li>loader 运行在 Node.js 中，并且能够执行任何可能的操作。</li><li>loader 接收查询参数。用于对 loader 传递配置。</li><li>loader 也能够使用 options 对象进行配置。</li><li>除了使用 package.json 常见的 main 属性，还可以将普通的 npm 模块导出为 loader，做法是在 package.json 里定义一个 loader 字段。（自定义 loader）</li><li>插件(plugin)可以为 loader 带来更多特性。</li><li>loader 能够产生额外的任意文件。</li></ul><p>loader 通过（loader）预处理函数，为 JavaScript 生态系统提供了更多能力。 用户现在可以更加灵活地引入细粒度逻辑，例如压缩、打包、语言翻译和其他更多。</p><h2 id="解析-loader"><a href="#解析-loader" class="headerlink" title="解析 loader"></a>解析 loader</h2><p>loader 遵循标准的模块解析。多数情况下，loader 将从模块路径（通常将模块路径认为是 npm install, node_modules）解析<br>loader 模块需要导出为一个函数，并且使用 Node.js 兼容的 JavaScript 编写。通常使用 npm 进行管理，但是也可以将自定义 loader 作为应用程序中的文件。按照约定，loader 通常被命名为 xxx-loader（例如 json-loader）。</p><h1 id="插件-plugins"><a href="#插件-plugins" class="headerlink" title="插件[plugins]"></a>插件[plugins]</h1><p>loader 被用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。插件接口功能极其强大，可以用来处理各种各样的任务。</p><p>想要使用一个插件，你只需要 require() 它，然后把它添加到 plugins 数组中。多数插件可以通过选项(option)自定义。你也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 new 操作符来创建它的一个实例。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 通过 npm 安装</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 用于访问内置插件</span><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> test<span class="token punctuation">:</span> <span class="token regex">/\.txt$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token string">'raw-loader'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> template<span class="token punctuation">:</span> <span class="token string">'./src/index.html'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> config</code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//通过 npm 安装</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//访问内置的插件</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token string">'./path/to/my/entry/file.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'my-first-webpack.bundle.js'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(js|jsx)$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token string">'babel-loader'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> template<span class="token punctuation">:</span> <span class="token string">'./src/index.html'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> config</code></pre><h2 id="剖析"><a href="#剖析" class="headerlink" title="剖析"></a>剖析</h2><p>webpack 插件是一个具有 apply 属性的 JavaScript 对象。apply 属性会被 webpack compiler 调用，并且 compiler 对象可在整个编译生命周期访问。</p><p>ConsoleLogOnBuildWebpackPlugin.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> pluginName <span class="token operator">=</span> <span class="token string">'ConsoleLogOnBuildWebpackPlugin'</span><span class="token keyword">class</span> <span class="token class-name">ConsoleLogOnBuildWebpackPlugin</span> <span class="token punctuation">{</span>  <span class="token function">apply</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>run<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span>pluginName<span class="token punctuation">,</span> <span class="token punctuation">(</span>compilation<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'webpack 构建过程开始！'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>compiler hook 的 tap 方法的第一个参数，应该是驼峰式命名的插件名称。建议为此使用一个常量，以便它可以在所有 hook 中复用。</p><blockquote><p>由于插件可以携带参数/选项，你必须在 webpack 配置中，向 plugins 属性传入 new 实例。</p></blockquote><h2 id="Node-API-这部分不理解"><a href="#Node-API-这部分不理解" class="headerlink" title="Node API(这部分不理解)"></a>Node API(这部分不理解)</h2><p>some-node-script.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//访问 webpack 运行时(runtime)</span><span class="token keyword">const</span> configuration <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./webpack.config.js'</span><span class="token punctuation">)</span><span class="token keyword">let</span> compiler <span class="token operator">=</span> <span class="token function">webpack</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span>compiler<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProgressPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>compiler<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> stats<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><blockquote><p>以上看到的示例和 webpack 自身运行时(runtime) 极其类似。wepback 源码中隐藏有大量使用示例，你可以用在自己的配置和脚本中。</p></blockquote><h1 id="模式-mode"><a href="#模式-mode" class="headerlink" title="模式[mode]"></a>模式[mode]</h1><p>通过选择 development 或 production 之中的一个，来设置 mode 参数，你可以启用相应模式下的 webpack 内置的优化</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">'production'</span><span class="token punctuation">}</span></code></pre><p>或者通过命令行传递：</p><pre class=" language-shell"><code class="language-shell">webpack --mode=production</code></pre><p>支持下面两种字符串值：</p><p>| 模板 | 描述 |<br>| 选项 | 描述 |<br>| development | 会将 process.env.NODE_ENV 的值设为 development。启用 NamedChunksPlugin 和 NamedModulesPlugin。 |<br>| production | 会将 process.env.NODE_ENV 的值设为 production。启用 FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin 和 UglifyJsPlugin. |</p><blockquote><p>!!!! 只设置 NODE_ENV，则不会自动设置 mode。</p></blockquote><h2 id="mode-development"><a href="#mode-development" class="headerlink" title="mode: development"></a>mode: development</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// webpack.development.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">+</span> mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token operator">-</span> plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">-</span>   <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>NamedModulesPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span>   <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">"process.env.NODE_ENV"</span><span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">"development"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span> <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="mode-production"><a href="#mode-production" class="headerlink" title="mode: production"></a>mode: production</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// webpack.production.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">+</span>  mode<span class="token punctuation">:</span> <span class="token string">'production'</span><span class="token punctuation">,</span><span class="token operator">-</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">-</span>    <span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/* ... */</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">"process.env.NODE_ENV"</span><span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">"production"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>ModuleConcatenationPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>NoEmitOnErrorsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h1 id="配置-configuration"><a href="#配置-configuration" class="headerlink" title="配置[configuration]"></a>配置[configuration]</h1><p>很少有 webpack 配置看起来很完全相同。因为 webpack 的配置文件，是导出一个对象的 JavaScript 文件。此对象，由 webpack 根据对象定义的属性进行解析。<br>webpack 配置是标准的 Node.js CommonJS 模块，你可以做到以下事情：</p><ul><li>通过 require(…) 导入其他文件</li><li>通过 require(…) 使用 npm 的工具函数</li><li>使用 JavaScript 控制流表达式，例如 ?: 操作符</li><li>对常用值使用常量或变量</li><li>编写并执行函数来生成部分配置</li></ul><p>不推荐的做法：</p><ul><li>在使用 webpack 命令行接口(CLI)（应该编写自己的命令行接口(CLI)，或使用 –env）时，访问命令行接口(CLI)参数</li><li>导出不确定的值（调用 webpack 两次应该产生同样的输出文件）</li><li>编写很长的配置（应该将配置拆分为多个文件）</li></ul><p>接下来的例子展示了 webpack 配置对象(webpack configuration object)如何即具有表现力，又具有可配置性，</p><h2 id="基本配置："><a href="#基本配置：" class="headerlink" title="基本配置："></a>基本配置：</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>  entry<span class="token punctuation">:</span> <span class="token string">'./foo.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    filename<span class="token punctuation">:</span> <span class="token string">'foo.bundle.js'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="导出为一个函数"><a href="#导出为一个函数" class="headerlink" title="导出为一个函数"></a>导出为一个函数</h3><p>需要在开发和生产构建之间，消除 webpack.config.js 的差异。（至少）有两种选项：<br>作为导出一个配置对象的替代，还有一种可选的导出方式是，从 webpack 配置文件中导出一个函数。该函数在调用时，可传入两个参数：</p><ul><li>环境对象(environment)作为第一个参数。一个选项 map 对象（argv）作为第二个参数。这个对象描述了传递给 webpack 的选项，并且具有 output-filename 和 optimize-minimize 等 key。</li></ul><pre class=" language-js"><code class="language-js"><span class="token operator">-</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">+</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> argv<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">+</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token operator">+</span>    mode<span class="token punctuation">:</span> env<span class="token punctuation">.</span>production <span class="token operator">?</span> <span class="token string">'production'</span> <span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span><span class="token operator">+</span>    devtool<span class="token punctuation">:</span> env<span class="token punctuation">.</span>production <span class="token operator">?</span> <span class="token string">'source-maps'</span> <span class="token punctuation">:</span> <span class="token string">'eval'</span><span class="token punctuation">,</span>     plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>       <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">+</span>        compress<span class="token punctuation">:</span> argv<span class="token punctuation">[</span><span class="token string">'optimize-minimize'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 只有传入 -p 或 --optimize-minimize</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token punctuation">]</span><span class="token operator">+</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="导出一个-Promise"><a href="#导出一个-Promise" class="headerlink" title="导出一个 Promise"></a>导出一个 Promise</h3><p>webpack 将运行由配置文件导出的函数，并且等待 Promise 返回。便于需要异步地加载所需的配置变量。</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        entry<span class="token punctuation">:</span> <span class="token string">'./app.js'</span>        <span class="token comment" spellcheck="true">/* ... */</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="导出多个配置对象"><a href="#导出多个配置对象" class="headerlink" title="导出多个配置对象"></a>导出多个配置对象</h3><p>作为导出一个配置对象/配置函数的替代，你可能需要导出多个配置对象（从 webpack 3.1.0 开始支持导出多个函数）。当运行 webpack 时，所有的配置对象都会构建。例如，导出多个配置对象，对于针对多个构建目标（例如 AMD 和 CommonJS）打包一个 library 非常有用。</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>      filename<span class="token punctuation">:</span> <span class="token string">'./dist-amd.js'</span><span class="token punctuation">,</span>      libraryTarget<span class="token punctuation">:</span> <span class="token string">'amd'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    entry<span class="token punctuation">:</span> <span class="token string">'./app.js'</span><span class="token punctuation">,</span>    mode<span class="token punctuation">:</span> <span class="token string">'production'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>      filename<span class="token punctuation">:</span> <span class="token string">'./dist-commonjs.js'</span><span class="token punctuation">,</span>      libraryTarget<span class="token punctuation">:</span> <span class="token string">'commonjs'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    entry<span class="token punctuation">:</span> <span class="token string">'./app.js'</span><span class="token punctuation">,</span>    mode<span class="token punctuation">:</span> <span class="token string">'production'</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><h3 id="根据不同语言进行配置"><a href="#根据不同语言进行配置" class="headerlink" title="根据不同语言进行配置"></a>根据不同语言进行配置</h3><ul><li><p>TypeScript<br>为了用 TypeScript 书写 webpack 的配置文件，必须先安装相关依赖：</p><pre class=" language-shell"><code class="language-shell">npm install --save-dev typescript ts-node @types/node @types/webpack</code></pre><p>之后就可以使用 TypeScript 书写 webpack 的配置文件了：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">'path'</span><span class="token keyword">import</span> webpack <span class="token keyword">from</span> <span class="token string">'webpack'</span><span class="token keyword">const</span> config<span class="token punctuation">:</span> webpack<span class="token punctuation">.</span>Configuration <span class="token operator">=</span> <span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">'production'</span><span class="token punctuation">,</span>  entry<span class="token punctuation">:</span> <span class="token string">'./foo.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>_dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    filename<span class="token punctuation">:</span> <span class="token string">'foo.bundle.js'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> config</code></pre><p>以上示例假定 webpack 版本 &gt;= 2.7，或者，在 tsconfig.json 文件中，具有 esModuleInterop 和 allowSyntheticDefaultImports 这两个新的编译器选项的较新版本 TypeScript。</p><p>注意，你还需要核对 tsconfig.json 文件。如果 tsconfig.json 中的 compilerOptions 中的 module 字段是 commonjs ，则配置是正确的，否则 webpack 将因为错误而构建失败。发生这种情况，是因为 ts-node 不支持 commonjs 以外的任何模块语法。<br>这个问题有两种解决方案：</p><ul><li>修改 tsconfig.json</li><li>安装 tsconfig-paths<br>_<em>第一个选项</em>是指，打开你的 tsconfig.json 文件并查找 compilerOptions。将 target 设置为 “ES5”，以及将 module 设置为 “CommonJS”（或者完全移除 module 选项）。<br>_<em>第二个选项</em>是指，安装 tsconfig-paths 包：</li></ul><pre class=" language-js"><code class="language-js">  npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev tsconfig<span class="token operator">-</span>paths</code></pre><p>然后，为你的 webpack 配置，专门创建一个单独的 TypeScript 配置：<br>tsconfig-for-webpack-config.json</p><pre class=" language-js"><code class="language-js">  <span class="token punctuation">{</span>  <span class="token string">"compilerOptions"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"module"</span><span class="token punctuation">:</span> <span class="token string">"commonjs"</span><span class="token punctuation">,</span>    <span class="token string">"target"</span><span class="token punctuation">:</span> <span class="token string">"es5"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><blockquote><p>ts-node 可以使用 tsconfig-path 提供的环境变量来解析 tsconfig.json 文件。</p></blockquote><p>然后，设置 tsconfig-path 提供的环境变量 process.env.TS_NODE_PROJECT，如下所示：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"TS_NODE_PROJECT=\"tsconfig-for-webpack-config.json\" webpack"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>Babel and JSX<br>首先安装依赖：</p><pre class=" language-shell"><code class="language-shell">  npm install --save-dev babel-register jsxobj babel-preset-es2015</code></pre><p>.babelrc</p><pre class=" language-shell"><code class="language-shell">  {    "presets": [ "es2015" ]  }</code></pre><p>webpack.config.babel.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> jsxobj <span class="token keyword">from</span> <span class="token string">'jsxobj'</span><span class="token comment" spellcheck="true">// example of an imported plugin</span><span class="token keyword">const</span> CustomPlugin <span class="token operator">=</span> <span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token operator">...</span>config<span class="token punctuation">,</span>  name<span class="token punctuation">:</span> <span class="token string">'custom-plugin'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>webpack target<span class="token operator">=</span><span class="token string">"web"</span> watch mode<span class="token operator">=</span><span class="token string">"production"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>entry path<span class="token operator">=</span><span class="token string">"src/index.js"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>resolve<span class="token operator">></span>      <span class="token operator">&lt;</span>alias        <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">{</span>          react<span class="token punctuation">:</span> <span class="token string">'preact-compat'</span><span class="token punctuation">,</span>          <span class="token string">'react-dom'</span><span class="token punctuation">:</span> <span class="token string">'preact-compat'</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>resolve<span class="token operator">></span>    <span class="token operator">&lt;</span>plugins<span class="token operator">></span>      <span class="token operator">&lt;</span>uglify<span class="token operator">-</span>js        opts<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>            compression<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            mangle<span class="token punctuation">:</span> <span class="token boolean">false</span>          <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>CustomPlugin foo<span class="token operator">=</span><span class="token string">"bar"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>plugins<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>webpack<span class="token operator">></span><span class="token punctuation">)</span></code></pre><blockquote><p>如果你在其他地方也使用了 Babel 并且把模块(modules)设置为了 false，那么你要么同时维护两份单独的 .babelrc 文件，要么使用 conts jsxobj = requrie(‘jsxobj’); 并且使用 moduel.exports 而不是新版本的 import 和 export 语法。这是因为尽管 Node.js 已经支持了许多 ES6 的新特性，然而还无法支持 ES6 模块语法。</p></blockquote></li></ul><h1 id="模块-modules"><a href="#模块-modules" class="headerlink" title="模块[modules]"></a>模块[modules]</h1><p>在模块化编程中，开发者将程序分解成离散功能块(discrete chunks of functionality)，并称之为模块。</p><p>每个模块具有比完整程序更小的接触面，使得校验、调试、测试轻而易举。 精心编写的模块提供了可靠的抽象和封装界限，使得应用程序中每个模块都具有条理清楚的设计和明确的目的。</p><p>Node.js 从最一开始就支持模块化编程。然而，在 web，模块化的支持正缓慢到来。在 web 存在多种支持 JavaScript 模块化的工具，这些工具各有优势和限制。webpack 基于从这些系统获得的经验教训，并将模块的概念应用于项目中的任何文件。</p><h2 id="什么是-webpack-模块"><a href="#什么是-webpack-模块" class="headerlink" title="什么是 webpack 模块"></a>什么是 webpack 模块</h2><p>对比 Node.js 模块，webpack 模块能够以各种方式表达它们的依赖关系，几个例子如下：</p><ul><li>ES2015 import 语句</li><li>CommonJS require() 语句</li><li>AMD define 和 require 语句</li><li>css/sass/less 文件中的 @import 语句</li><li>样式(url(…))或 HTML 文件(<img src="...">)中的图片链接(image url)</li></ul><blockquote><p>webpack 1 需要特定的 loader 来转换 ES 2015 import，然而通过 webpack 2 可以开箱即用。</p></blockquote><h2 id="支持的模块类型"><a href="#支持的模块类型" class="headerlink" title="支持的模块类型"></a>支持的模块类型</h2><p>webpack 通过 loader 可以支持各种语言和预处理器编写模块。loader 描述了 webpack 如何处理 非 JavaScript(non-JavaScript) _模块_，并且在 bundle 中引入这些依赖。 webpack 社区已经为各种流行语言和语言处理器构建了 loader，包括：</p><ul><li>CoffeeScript</li><li>TypeScript</li><li>ESNext (Babel)</li><li>Sass</li><li>Less</li><li>Stylus</li></ul><h1 id="模块解析-module-resolution"><a href="#模块解析-module-resolution" class="headerlink" title="模块解析[module resolution]"></a>模块解析[module resolution]</h1><p>resolver 是一个库(library)，用于帮助找到模块的绝对路径。一个模块可以作为另一个模块的依赖模块，然后被后者引用，如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> foo <span class="token keyword">from</span> <span class="token string">'path/to/module'</span><span class="token comment" spellcheck="true">// 或者</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path/to/module'</span><span class="token punctuation">)</span></code></pre><p>所依赖的模块可以是来自应用程序代码或第三方的库(library)。resolver 帮助 webpack 找到 bundle 中需要引入的模块代码，这些代码在包含在每个 require/import 语句中。 当打包模块时，webpack 使用 enhanced-resolve 来解析文件路径</p><h3 id="webpack-中的解析规则"><a href="#webpack-中的解析规则" class="headerlink" title="webpack 中的解析规则"></a>webpack 中的解析规则</h3><p>使用 enhanced-resolve，webpack 能够解析三种文件路径：</p><ul><li><p>绝对路径</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token string">'/home/me/file'</span><span class="token keyword">import</span> <span class="token string">'C:\\Users\\me\\file'</span></code></pre><p>由于我们已经取得文件的绝对路径，因此不需要进一步再做解析。</p></li><li><p>相对路径</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token string">'../src/file1'</span><span class="token keyword">import</span> <span class="token string">'./file2'</span></code></pre><p>在这种情况下，使用 import 或 require 的资源文件(resource file)所在的目录被认为是上下文目录(context directory)。在 import/require 中给定的相对路径，会添加此上下文路径(context path)，以产生模块的绝对路径(absolute path)。</p></li><li><p>模块路径</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token string">'module'</span><span class="token keyword">import</span> <span class="token string">'module/lib/file'</span></code></pre><p>模块将在 resolve.modules 中指定的所有目录内搜索。 你可以替换初始模块路径，此替换路径通过使用 resolve.alias 配置选项来创建一个别名。<br>一旦根据上述规则解析路径后，解析器(resolver)将检查路径是否指向文件或目录。如果路径指向一个文件：</p><ul><li>如果路径具有文件扩展名，则被直接将文件打包。</li><li>否则，将使用 [resolve.extensions] 选项作为文件扩展名来解析，此选项告诉解析器在解析中能够接受哪些扩展名（例如 .js, .jsx）。</li></ul><p>如果路径指向一个文件夹，则采取以下步骤找到具有正确扩展名的正确文件：</p><ul><li>如果文件夹中包含 package.json 文件，则按照顺序查找 resolve.mainFields 配置选项中指定的字段。并且 package.json 中的第一个这样的字段确定文件路径。</li><li>如果 package.json 文件不存在或者 package.json 文件中的 main 字段没有返回一个有效路径，则按照顺序查找 resolve.mainFiles 配置选项中指定的文件名，看是否能在 import/require 目录下匹配到一个存在的文件名。</li><li>文件扩展名通过 resolve.extensions 选项采用类似的方法进行解析。</li></ul><p>webpack 根据构建目标(build target)为这些选项提供了合理的默认配置。</p></li></ul><h3 id="解析-Loader-Resolving-Loaders"><a href="#解析-Loader-Resolving-Loaders" class="headerlink" title="解析 Loader[Resolving Loaders]"></a>解析 Loader[Resolving Loaders]</h3><p>Loader 解析遵循与文件解析器指定的规则相同的规则。但是 resolveLoader 配置选项可以用来为 Loader 提供独立的解析规则。</p><ul><li>resolveLoader<br>与 resolve 对象的属性集合相同，但仅用于解析 webpack 的 loader 包。默认：<pre class=" language-js"><code class="language-js">  <span class="token punctuation">{</span>   modules<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">'node_modules'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>   extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">'.js'</span><span class="token punctuation">,</span> <span class="token string">'.json'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>   mainFields<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">'loader'</span><span class="token punctuation">,</span> <span class="token string">'main'</span> <span class="token punctuation">]</span>  <span class="token punctuation">}</span></code></pre><blockquote><p>这里你可以使用别名，并且其他特性类似于 resolve 对象。例如，{ txt: ‘raw-loader’ } 会使用 raw-loader 去 shim(填充) txt!templates/demo.txt。</p></blockquote></li><li>resolveLoader.moduleExtensions<br>解析 loader 时，用到扩展名(extensions)/后缀(suffixes)。<br>如果你想省略 -loader，也就是说只使用 example，则可以使用此选项来实现：<pre class=" language-js"><code class="language-js">moduleExtensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'-loader'</span><span class="token punctuation">]</span></code></pre></li></ul><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>每个文件系统访问都被缓存，以便更快触发对同一文件的多个并行或串行请求。在观察模式下，只有修改过的文件会从缓存中摘出。如果关闭观察模式，在每次编译前清理缓存。</p><h1 id="webpack-打包后的文件如何在浏览器中跑起来？"><a href="#webpack-打包后的文件如何在浏览器中跑起来？" class="headerlink" title="webpack 打包后的文件如何在浏览器中跑起来？"></a>webpack 打包后的文件如何在浏览器中跑起来？</h1><p>在使用 webpack 构建的典型应用程序或站点中，有三种主要的代码类型：</p><ul><li>你或你的团队编写的源码。</li><li>你的源码会依赖的任何第三方的 library 或 “vendor” 代码。</li><li>webpack 的 runtime 和 manifest，管理所有模块的交互。</li></ul><h2 id="Manifest"><a href="#Manifest" class="headerlink" title="Manifest"></a>Manifest</h2><p>一旦你的应用程序中，形如 index.html 文件、一些 bundle 和各种资源加载到浏览器中，会发生什么？你精心安排的 /src 目录的文件结构现在已经不存在，所以 webpack 如何管理所有模块之间的交互呢？这就是 manifest 数据用途的由来……</p><p>当编译器(compiler)开始执行、解析和映射应用程序时，它会保留所有模块的详细要点。这个数据集合称为 “Manifest”，当完成打包并发送到浏览器时，会在运行时通过 Manifest 来解析和加载模块。无论你选择哪种模块语法，那些 import 或 require 语句现在都已经转换为 <strong>webpack_require</strong> 方法，此方法指向模块标识符(module identifier)。通过使用 manifest 中的数据，runtime 将能够查询模块标识符，检索出背后对应的模块。</p><h2 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h2><p>runtime，以及伴随的 manifest 数据，主要是指：在浏览器运行时，webpack 用来连接模块化的应用程序的所有代码。runtime 包含：在模块交互时，连接模块所需的加载和解析逻辑。包括浏览器中的已加载模块的连接，以及懒加载模块的执行逻辑</p><blockquote><p>Runtime 和 Manifest<br>这两个定义在大多数情况下没有用途。runtime 会做自己该做的，使用 manifest 来执行其操作，一般不需要用户关心。但一旦你的应用程序加载到浏览器中，所有内容将展现出魔幻般运行。然而，如果你决定通过使用浏览器缓存来改善项目的性能，理解这一过程将突然变得尤为重要。<br>通过使用 bundle 计算出内容散列(content hash)作为文件名称，这样在内容或文件修改时，浏览器中将通过新的内容散列指向新的文件，从而使缓存无效。一旦你开始这样做，你会立即注意到一些有趣的行为。即使表面上某些内容没有修改，计算出的哈希还是会改变。这是因为，runtime 和 manifest 的注入在每次构建都会发生变化。</p></blockquote><h1 id="构建目标-targets"><a href="#构建目标-targets" class="headerlink" title="构建目标[targets]"></a>构建目标[targets]</h1><p>因为服务器和浏览器代码都可以用 JavaScript 编写，所以 webpack 提供了多种构建目标(target)，你可以在你的 webpack 配置中设置。</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>target 用于告知 webpack 为目标(target)指定一个环境。<br>要设置 target 属性，只需要在你的 webpack 配置中设置 target 的值。</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  target<span class="token punctuation">:</span> <span class="token string">'node'</span><span class="token punctuation">}</span></code></pre><p>在上面例子中，使用 node webpack 会编译为用于「类 Node.js」环境（使用 Node.js 的 require ，而不是使用任意内置模块（如 fs 或 path）来加载 chunk）。</p><blockquote><p>target 通过 WebpackOptionsApply ，可以支持以下字符串值：<br>| 选项 | 描述 |<br>| async-node | 编译为类 Node.js 环境可用（使用 fs 和 vm 异步加载分块） |<br>| electron-main | 编译为 Electron 主进程。 |<br>| electron-renderer | 编译为 Electron 渲染进程，使用 JsonpTemplatePlugin, FunctionModulePlugin 来为浏览器环境提供目标，使用 NodeTargetPlugin 和 ExternalsPlugin 为 CommonJS 和 Electron 内置模块提供目标。 |<br>| node | 编译为类 Node.js 环境可用（使用 Node.js require 加载 chunk） |<br>| node-webkit | 编译为 Webkit 可用，并且使用 jsonp 去加载分块。支持 Node.js 内置模块和 nw.gui 导入（实验性质）|<br>| web | 编译为类浏览器环境里可用（默认）|<br>| webworker | 编译成一个 WebWorker |</p></blockquote><p>例如，当 target 设置为 “electron”，webpack 引入多个 electron 特定的变量。有关使用哪些模板和 externals 的更多信息</p><p>如果传入一个函数，此函数调用时会传入一个 compiler 作为参数。如果以上列表中没有一个预定义的目标(target)符合你的要求，请将其设置为一个函数。<br>例如，如果你不需要使用以上任何插件：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>  target<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> undefined<span class="token punctuation">}</span></code></pre><p>或者可以使用你想要指定的插件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>  target<span class="token punctuation">:</span> <span class="token punctuation">(</span>compiler<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    compiler<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>      <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>JsonpTemplatePlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>LoaderTargetPlugin</span><span class="token punctuation">(</span><span class="token string">'web'</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="多个-target"><a href="#多个-target" class="headerlink" title="多个 target"></a>多个 target</h2><p>尽管 webpack 不支持向 target 传入多个字符串，你可以通过打包两份分离的配置来创建同构的库：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">var</span> serverConfig <span class="token operator">=</span> <span class="token punctuation">{</span>  target<span class="token punctuation">:</span> <span class="token string">'node'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    filename<span class="token punctuation">:</span> <span class="token string">'lib.node.js'</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//…</span><span class="token punctuation">}</span><span class="token keyword">var</span> clientConfig <span class="token operator">=</span> <span class="token punctuation">{</span>  target<span class="token punctuation">:</span> <span class="token string">'web'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// &lt;=== 默认是 'web'，可省略</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    filename<span class="token punctuation">:</span> <span class="token string">'lib.js'</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//…</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">[</span>serverConfig<span class="token punctuation">,</span> clientConfig<span class="token punctuation">]</span></code></pre><p>上面的例子将在你的 dist 文件夹下创建 lib.js 和 lib.node.js 文件。</p><h1 id="模块热替换-hot-module-replacement"><a href="#模块热替换-hot-module-replacement" class="headerlink" title="模块热替换[hot module replacement]"></a>模块热替换[hot module replacement]</h1><p>模块热替换(HMR - Hot Module Replacement)功能会在应用程序运行过程中替换、添加或删除模块，而无需重新加载整个页面。主要是通过以下几种方式，来显著加快开发速度：</p><ul><li>保留在完全重新加载页面时丢失的应用程序状态。</li><li>只更新变更内容，以节省宝贵的开发时间。</li><li>调整样式更加快速 - 几乎相当于在浏览器调试器中更改样式。</li></ul><h2 id="热更新模块是如何运行的"><a href="#热更新模块是如何运行的" class="headerlink" title="热更新模块是如何运行的"></a>热更新模块是如何运行的</h2><p>让我们从一些不同的角度观察，以了解 HMR 的工作原理……</p><h4 id="在应用程序中"><a href="#在应用程序中" class="headerlink" title="在应用程序中"></a>在应用程序中</h4><p>通过以下步骤，可以做到应用程序中置换模块：</p><ul><li>应用程序代码要求 HMR runtime 检查更新</li><li>HMR runtime（异步）下载更新，然后通知应用程序代码</li><li>应用程序代码要求 HMR runtime 应用更新</li><li>HMR runtime（同步）应用更新</li></ul><p>你可以设置 HMR，以使此进程自动触发更新，或者你可以选择要求在用户交互时进行更新。</p><h4 id="在编译器中"><a href="#在编译器中" class="headerlink" title="在编译器中"></a>在编译器中</h4><p>除了普通资源，编译器(compiler)需要发出 “update”，以允许更新之前的版本到新的版本。”update” 由两部分组成：</p><ul><li>更新后的 manifest(JSON)</li><li>一个或多个更新后的 chunk (JavaScript)</li></ul><p>manifest 包括新的编译 hash 和所有的待更新 chunk 目录。每个更新 chunk 都含有对应于此 chunk 的全部更新模块（或一个 flag 用于表明此模块要被移除）的代码。</p><p>编译器确保模块 ID 和 chunk ID 在这些构建之间保持一致。通常将这些 ID 存储在内存中（例如，使用 webpack-dev-server 时），但是也可能将它们存储在一个 JSON 文件中。</p><h4 id="在模块中"><a href="#在模块中" class="headerlink" title="在模块中"></a>在模块中</h4><p>HMR 是可选功能，只会影响包含 HMR 代码的模块。举个例子，通过 style-loader 为 style 样式追加补丁。为了运行追加补丁，style-loader 实现了 HMR 接口；当它通过 HMR 接收到更新，它会使用新的样式替换旧的样式。<br>类似的，当在一个模块中实现了 HMR 接口，你可以描述出当模块被更新后发生了什么。然而在多数情况下，不需要强制在每个模块中写入 HMR 代码。如果一个模块没有 HMR 处理函数，更新就会冒泡(bubble up)。这意味着一个简单的处理函数能够对整个模块树(complete module tree)进行更新。如果在这个模块树中，一个单独的模块被更新，那么整组依赖模块都会被重新加载。</p>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> webpack基础 </tag>
            
            <tag> 巨TM详细 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单点登录SSO</title>
      <link href="/2021/03/16/dan-dian-deng-lu-sso/"/>
      <url>/2021/03/16/dan-dian-deng-lu-sso/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-单点登录"><a href="#什么是-单点登录" class="headerlink" title="什么是 单点登录"></a>什么是 单点登录</h2><p>单点登录旨在为多款产品提供一套且唯一的登录系统，即在多个应用系统中，只需要登录一次，就可以访问其他相互信任的应用系统</p><blockquote><p>单点登录全称 Single Sign On，以下统一简称为 SSO</p></blockquote><blockquote><p><img src="/meme/sso.png" alt="Eric 真帅!"><br>如图所示，分别有三个应用和 sso 服务器。三个应用都没有登录模块，而 SSO 只有登录模块，没有其他的业务模块。当三个应用需要登录时，将跳转到 SSO 系统，SSO 系统完成登录验证之后，其他的应用系统也就随之登录了。</p></blockquote><h2 id="普通的登录验证机制"><a href="#普通的登录验证机制" class="headerlink" title="普通的登录验证机制"></a>普通的登录验证机制</h2><p>在开始介绍单点登录验证之前，我们先看一下普通的登录机制：<br><img src="/meme/login.png" alt="Eric 真帅!"></p><p>如图所示，我们在浏览器访问一个应用，该应用需要登录，需要在输入用户名密码后，发送请求到服务端完成验证。这时，我们的服务端该用户的 session 标记登录为已登录状态。同时也会在浏览器中写入 cookie，这个 cookie 是该用户在服务端的唯一标识。下次我们再访问该应用时，浏览器检测 cookie，如未过期，请求中会携带着这个 cookie，服务端会根据这个 cookie 寻找对应的 session，通过 session 来判断该用户是否完成登录，如不做特殊配置，这个 cookie 的名字我们一般命名为 session-id，且在服务端对应唯一的 session<br>下面我们开始了解 SSO</p><h2 id="同域名下的-SSO"><a href="#同域名下的-SSO" class="headerlink" title="同域名下的 SSO"></a>同域名下的 SSO</h2><p>在企业的场景下，大多数情况都是多个产品使用同一个域名，只不过是通过二级域名区分不同的系统。比如我们有个域名叫：eric.com，同时有两个业务产品分别为：APP1.eric.com 和 APP2.eric.com,而我们的单点登录系统域名则为：sso.eric.com</p><p>在单点登录系统下，我们只要在 sso.eric.com 上登录验证成功，那我们在 APP1.eric.com 和 APP2.eric.com 上也就登录了。为了实现这个目的，我们应该如何操作呢？也就是当我们在 sso.eric.com 上登录了，sso 的服务端记录了我们的 session（已登录状态），这时如何才能让我们在访问 APP1.eric.com 和 APP2.eric.com 实现登录呢？<br>在实现单点登录系统之前，我们需要知道：</p><blockquote><ul><li>cookie 是不能跨域的，我们的 cookie 的 domain 属性属于 sso.eric.com，在给 APP1.eric.com 和 APP2.eric.com 发送请求是带不上的</li><li>sso、APP1 和 APP2 是不同的应用，他们的 session 存在自己的服务端内，是不共享的</li></ul></blockquote><p>那么我们如何解决这两个问题呢？我们先看图<br><img src="/meme/sameSSO.png" alt="Eric 真帅!"></p><p>cookie 问题：我们在 sso 登录以后，可以将 cookie 的域（domain）设置为顶域，即 eric.com，这样我们所有的子域系统都可以访问到顶域的 cookie（我们在设置 cookie 时，只能设置顶域和自己的域，不能设置其他的域，比如：我们不能再自己的系统中给 baidu.com 的域设置 cookie）。</p><p>session 问题：我们在 sso 登录以后，这时再访问 APP2、APP1，cookie 也会对应的带到应用下的服务端。那么服务端如何找到这个 cookie 对应的 session 呢？这里就需要将三个系统的 session 共享。</p><blockquote><p>session 共享：通用的 redis、etcd、postgres 均可</p></blockquote><p>当然这不是完整的单点登录，但是这个方案可以在要求不是很高的情况下满足需求</p><h2 id="不同域名下的-SSO"><a href="#不同域名下的-SSO" class="headerlink" title="不同域名下的 SSO"></a>不同域名下的 SSO</h2><p>同一域名下使用 cookie 顶域以及共享 session 解决了 SSO 的需求，但是如果实在不同域下呢？不同域之间的 cookie 和 session 是不共享的，难道我们还要在不同域名下的服务再做一次通信？<br>这里我们就可以采用 CAS 流程了，这个流程是单点登录的标准流程，老规矩，先看图<br><img src="/meme/SSO1.png" alt="Eric 真帅!"></p><p>该图的流程描述的是用户第一次登录的情况：</p><ul><li>用户访问 APP1 系统，APP1 是需要登录的，而此时用户并没有登录</li><li>直接重定向到 CAS 系统（SSO 系统）。而此时 SSO 系统也没有登录，SSO 弹出用户登录页</li><li>用户填写用户名密码，发送请求到 SSO 服务器验证后，在该服务器写入该用户登录状态（已登录）的 session，browser 中写入 sso 域下的 cookie</li><li>SSO 系统登录完成后会生成一个 ST（Service Ticket），然后跳转到 APP1 系统，同时将 ST 作为参数传递给 APP1 系统</li><li>APP1 系统拿到 ST 后，从后台向 SSO 发送请求，验证 ST 是否有效</li><li>验证通过后，APP 系统将登录状态写入 session 并设置 APP1 域下的 cookie<br>至此，单点登录就算完成了，以后我们再访问 APP1 系统时，APP1 就是登录的<br><img src="/meme/SSO2.png" alt="Eric 真帅!"></li></ul><p>现在我们来看看用户登录 APP1 后，访问 APP2 的情况：</p><ul><li>用户访问 APP2 系统，APP2 没有登录，跳转到 SSO</li><li>而此时 SSO 系统已经登录了，不需要重新登录验证</li><li>SSO 生成 ST，浏览器跳转到 APP2 系统，并将 ST 作为参数传递给 APP2</li><li>APP2 拿到 ST 后，后台访问 SSO，验证 ST 是否有效</li><li>验证通过后，APP2 系统将登录状态写入 session 并设置 APP2 域下的 cookie</li></ul>]]></content>
      
      
      <categories>
          
          <category> 单点登录SSO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单点登录SSO </tag>
            
            <tag> CAS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sentry——开源监控系统部署(一)</title>
      <link href="/2021/03/15/sentry-kai-yuan-jian-kong-xi-tong-bu-shu-yi/"/>
      <url>/2021/03/15/sentry-kai-yuan-jian-kong-xi-tong-bu-shu-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-Sentry"><a href="#什么是-Sentry" class="headerlink" title="什么是 Sentry"></a>什么是 Sentry</h2><p>Sentry 为一套开源的应用监控和错误追踪的解决方案。这套解决方案由对应各种语言的 SDK 和一套庞大的数据后台服务组成。应用需要通过与之绑定的 token 接入 Sentry SDK 完成数据上报的配置。通过 Sentry SDK 的配置，还可以上报错误关联的版本信息、发布环境。同时 Sentry SDK 会自动捕捉异常发生前的相关操作，便于后续异常追踪。异常数据上报到数据服务之后，会通过过滤、关键信息提取、归纳展示在数据后台的 Web 界面中。</p><p>在完成接入后我们就可以从管理系统中实时查看应用的异常，从而主动监控应用在客户端的运行情况。通过配置报警、分析异常发生趋势更主动的将异常扼杀在萌芽状态，影响更少的用户。通过异常详情分析、异常操作追踪，避免对客户端应用异常两眼一抹黑的状态，更高效的解决问题。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p>Docker 是可以用来构建和容器化应用的开源容器化技术。<br>Compose 是用于配置和运行多 Docker 应用的工具，可以通过一个配置文件配置应用的所有服务，并一键创建和运行这些服务。<br>建议部署环境：linux 系统下</p><h4 id="部署配置要求："><a href="#部署配置要求：" class="headerlink" title="部署配置要求："></a>部署配置要求：</h4><ul><li>Docker 19.03.6+</li><li>Compose 1.24.1+</li><li>4 CPU Cores</li><li>8 GB RAM</li><li>20 GB Free Disk Space</li></ul><h2 id="快速部署-Sentry"><a href="#快速部署-Sentry" class="headerlink" title="快速部署 Sentry"></a>快速部署 Sentry</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/getsentry/onpremise.git</code></pre><p>我在这里使用的是最新版本，后续可对比时间，checkout 到对应分支再 clone 代码（Sentry 更新蛮频繁的，如需按照博客流程走，建议使用相对应的版本）</p><h3 id="后续部署过程中，需要拉取大量镜像，建议配置镜像加速服务（阿里或者-DaoCloud-都有免费的服务），获取到链接后修改或生成-etc-docker-daemon-json-文件即可"><a href="#后续部署过程中，需要拉取大量镜像，建议配置镜像加速服务（阿里或者-DaoCloud-都有免费的服务），获取到链接后修改或生成-etc-docker-daemon-json-文件即可" class="headerlink" title="后续部署过程中，需要拉取大量镜像，建议配置镜像加速服务（阿里或者 DaoCloud 都有免费的服务），获取到链接后修改或生成/etc/docker/daemon.json 文件即可"></a>后续部署过程中，需要拉取大量镜像，建议配置镜像加速服务（阿里或者 DaoCloud 都有免费的服务），获取到链接后修改或生成/etc/docker/daemon.json 文件即可</h3><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">{</span>  <span class="token string">"registry-mirrors"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"镜像地址"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>在拉取到的代码的根目录下会有 install.sh 文件，可直接执行脚本即可完成快速部署。该脚本会去拉取 Sentry 所需的镜像，过程较慢，建议在网路良好的环境下部署。部署过程大致如下：</p><ul><li>环境检查</li><li>生成服务配置</li><li>docker volume 数据卷创建（docker 持久化存储，可理解为 docker 独立的存储）</li><li>拉取和升级基础镜像</li><li>构建镜像</li><li>服务初始化</li><li>设置管理员账号（跳过此步，可通过手动创建）</li></ul><p>执行结束后，会提示创建完毕，在根目录下运行 docker-compose up -d 启动服务，打开 localhost:9000 即可开启 web 页面<br>在使用不添加 -d 参数运行 docker-compose up 命令后，我们可以看到服务的启动日志，需要等待内部 web、relay、snuba、kafka 等全部启动并联动初始化后，服务才算完全启动</p><blockquote><p>第一次访问管理后台，可以看到欢迎页面，完成必填项的配置，即可正式访问管理后台。<br><img src="/sentry/user.png" alt="Eric 真帅!"></p></blockquote><ul><li>Root URL：异常上报接口的公网根地址（在做网络解析配置时，后台服务可以配置到内网外网两个域名，只将上报接口的解析规则 /api/[id]/store/ 配置到公网环境，保证数据不会泄密）</li><li>Admin Email：在 install.sh 阶段创建的管理员账号</li><li>Outbound email：这部分内容为邮件服务配置，可以先不配置,后面可以在根目录下的/sentry/config.yml 中配置</li></ul><h2 id="Docker-数据存储位置修改"><a href="#Docker-数据存储位置修改" class="headerlink" title="Docker 数据存储位置修改"></a>Docker 数据存储位置修改</h2><p>在服务运行过程中，会有大量的 log、Postgres 生成，这些数据都会挂在到 docker volume 中，volume 默认挂在/var 目录下，通常/var 目录容量较小，随着服务运行内存很容易被占满，我们可以对 docker volume 挂在目录进行修改</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 在容量最大的目录下创建文件夹</span><span class="token function">mkdir</span> -p /data/var/lib/<span class="token comment" spellcheck="true"># 停止 docker 服务</span>systemctl stop docker<span class="token comment" spellcheck="true"># 将 docker 的默认数据复制到新路径下，删除旧数据并创建软连接，即使得存储实际占用磁盘为新路径</span>/bin/cp -a /var/lib/docker /data/var/lib/docker <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> -rf /var/lib/docker <span class="token operator">&amp;&amp;</span>  <span class="token function">ln</span> -s /data/var/lib/docker /var/lib/docker<span class="token comment" spellcheck="true"># 重启 docker 服务</span>systemctl start docker</code></pre><h2 id="邮件提醒配置"><a href="#邮件提醒配置" class="headerlink" title="邮件提醒配置"></a>邮件提醒配置</h2><p>在根目录下的/sentry/config.yml 进行配置<br>配置邮箱前，需要先打开邮箱的 smtp 服务，不同邮箱配置方法不同，自行寻找方法配置</p><pre class=" language-bash"><code class="language-bash">mail.backend: <span class="token string">"smtp"</span>mail.host: <span class="token string">"smtp.163.com"</span>mail.port: 25mail.username: <span class="token string">"邮件地址"</span>mail.password: <span class="token string">"密码"</span>mail.use-tls: <span class="token boolean">true</span>  <span class="token comment" spellcheck="true">#是否使用tls服务</span><span class="token comment" spellcheck="true">#The email address to send on behalf of</span>mail.from: <span class="token string">"邮件来源地址"</span></code></pre><p>该配置文件下还支持配置 git 以及 slack，详情可见<a href="https://docs.sentry.io/" title="https://docs.sentry.io/">Sentry 官方文档</a></p><h2 id="env-文件"><a href="#env-文件" class="headerlink" title=".env 文件"></a>.env 文件</h2><pre class=" language-bash"><code class="language-bash">COMPOSE_PROJECT_NAME<span class="token operator">=</span>sentry_onpremiseSENTRY_EVENT_RETENTION_DAYS<span class="token operator">=</span>90SENTRY_IMAGE<span class="token operator">=</span>getsentry/sentry:83b1380<span class="token comment" spellcheck="true"># You can either use a port number or an IP:PORT combo for SENTRY_BIND</span><span class="token comment" spellcheck="true"># See https://docs.docker.com/compose/compose-file/#ports for more</span>SENTRY_BIND<span class="token operator">=</span>9000SENTRY_IMAGE<span class="token operator">=</span>getsentry/sentry:nightlySNUBA_IMAGE<span class="token operator">=</span>getsentry/snuba:nightlyRELAY_IMAGE<span class="token operator">=</span>getsentry/relay:nightlySYMBOLICATOR_IMAGE<span class="token operator">=</span>getsentry/symbolicator:nightly</code></pre><p>环境变量可在根目录下的.env 文件声明，也可在 docker-compose.yml 文件的 environment 声明<br>SENTRY_EVENT_RETENTION_DAYS 为数据保留时长<br>对应业务需求，我们可以控制数据保留时长，减少服务器内存消耗<br>如果数据库没有定时回收的机制，则需要手动进行物理删除。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 作为参考的回收语句</span>vacuumdb -U <span class="token punctuation">[</span>用户名<span class="token punctuation">]</span> -d <span class="token punctuation">[</span>数据库名<span class="token punctuation">]</span> -v -f --analyze</code></pre><h2 id="Sentry-所需镜像服务以及运行机制"><a href="#Sentry-所需镜像服务以及运行机制" class="headerlink" title="Sentry 所需镜像服务以及运行机制"></a>Sentry 所需镜像服务以及运行机制</h2><p>打开根目录下的 docker-compose.yml 文件，同时在终端运行命令</p><pre class=" language-bash"><code class="language-bash">docker <span class="token function">ps</span> -a</code></pre><p>这里我们可以对比当前运行的容器和 docker-compose 配置，猜测理解每个服务的作用（个人理解，仅限参考）：</p><ul><li>nginx：进行服务间的网络通信</li><li>sentry_defaults：默认环境<ul><li>worker：处理后台工作，邮件，报警等</li><li>cron：处理定时任务</li><li>web：sentry 的 web 页面服务</li><li>post-process-forwarder</li><li>ingest-consumer：处理 kafka 消息</li></ul></li><li>snuba-cleanup：数据清理</li><li>relay：<ul><li>web 上报的数据先到 relay</li><li>relay 直接返回响应状态</li><li>然后在后台任务中继续处理数据</li><li>解析事件、格式调整、启用过滤规则等</li><li>数据写入 kafka</li></ul></li><li>postgres：服务后台默认的数据库，存储异常数据</li><li>redis：数据拦截配置</li><li>kafka：数据响应，建立服务间的长连接</li><li>zookeeper：支持管理 kafaka 的服务</li></ul><p>Sentry 大概运行机制如下：</p><ul><li>异常数据通过 nginx 解析到 relay 服务。</li><li>relay 通过 pg 获取最新的应用与 token 匹配关系，并验证数据中的 token，直接返回 403 或 200，并对数据进行拦截过滤。</li><li>relay 将数据发送给 kafka 的不同 topic。</li><li>sentry 订阅其中部分 topic，解析数据存入 Postgres，用做后续查看错误详情。</li><li>snuba 订阅其他 topic，对数据打标签，提取关键特征，存入 ClickHouse，用来快速根据关键特征检索数据。</li></ul><blockquote><p>下一节介绍 Sentry 介入 SSO 单点登录、角色配置，项目引入以及通用使用方式</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Sentry </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 错误日志平台 </tag>
            
            <tag> Sentry </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS基础（一）</title>
      <link href="/2021/03/10/js-ji-chu-yi/"/>
      <url>/2021/03/10/js-ji-chu-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="JS-内置类型"><a href="#JS-内置类型" class="headerlink" title="JS 内置类型"></a>JS 内置类型</h2><ul><li>JS 分为七中内置类型，又分为量大类型：基本类型和对象</li><li>基本类型：String、Number、Boolean、Null、Undefined、Symbol</li><li>引用数据类型：Object、Function、Array</li><li>其中 JS 的数字类型是浮点类型，没有整型（这也就是为什么常说的 JS 中 0.1+0.2!=0.3）,并且浮点类型基于 IEEE754 标准实现，在使用中会遇到某些 bug。其次，NaN 也属于 number 类型，并且 NaN 不等于自身</li><li>对于基本类型来说，如果使用字面量的方式，那么这个变量值只是字面量，只有在必要时才会转换为对应的类型。</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">111</span> <span class="token comment" spellcheck="true">// 此时a只是一个字面量，并不是number类型</span>a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 使用时候才会转换为对象类型</span></code></pre><blockquote><p>对象（Object）是引用类型，在使用过程中会遇到深浅拷贝的问题</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//浅拷贝</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'FE'</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 此时a只是一个字面量，并不是number类型</span><span class="token keyword">let</span> a <span class="token operator">=</span> bb<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'EF'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// EF</span></code></pre><p>JS 原生不支持深拷贝，object.asign 和{…obj}都属于浅拷贝</p><blockquote><p>JSON.parse(JSON.stringify())</p><blockquote><p>这是 JS 实现深拷贝最简单的方法，原理就是先将对象转换为 JSON 字符串，再通过 JSON.parse 重现构建对象，但是这种方法的缺点如下：</p></blockquote></blockquote><ul><li>不能复制 function、正则、Symbol，会忽略 undefined 和 symbol</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>  reg<span class="token punctuation">:</span> <span class="token regex">/^asd$/</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>  sex<span class="token punctuation">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'male'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  jobs<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  name<span class="token punctuation">:</span> <span class="token string">'yck'</span><span class="token punctuation">}</span><span class="token keyword">let</span> b <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {name: "yck"，reg : {}}</span></code></pre><ul><li><p>循环引用会报错<br>如果在 JSON.stringify 中传入一个循环引用的对象，那么会直接报错：<br><img src="/meme/error.jpg" alt="Eric 真帅!"></p></li><li><p>不能序列化函数</p></li><li><p>相同的引用会被重复复制</p></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">;</span><span class="token string">'object'</span><span class="token punctuation">}</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'aaaaaa'</span><span class="token punctuation">}</span><span class="token keyword">let</span> obj3 <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'bbbbbb'</span><span class="token punctuation">}</span>obj<span class="token punctuation">.</span>t1 <span class="token operator">=</span> obj2obj<span class="token punctuation">.</span>t2 <span class="token operator">=</span> obj3<span class="token keyword">let</span> cp <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>ttt1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'change'</span>cp<span class="token punctuation">.</span>ttt1<span class="token punctuation">.</span>name  <span class="token operator">=</span> <span class="token string">'change'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>cp<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="/meme/obj.jpg" alt="Eric 真帅!"></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//深拷贝</span><span class="token keyword">let</span> b <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><blockquote><p>递归实现 JS 深拷贝：思想非常简单，对于简单类型，直接复制。对于引用类型，递归复制它的每一个属性。<br>需要解决的问题：</p></blockquote></blockquote><ul><li>循环引用</li><li>相同引用</li><li>不同的类型</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> copyed_objs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//此数组解决了循环引用和相同引用的问题，它存放已经递归到的目标对象</span>  <span class="token keyword">function</span> <span class="token function">_deepCopy</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> target <span class="token operator">!==</span> <span class="token string">'object'</span> <span class="token operator">||</span> <span class="token operator">!</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> target    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> copyed_objs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>copyed_objs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>target <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> copyed_objs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>copyTarget      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      obj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//处理target是数组的情况</span>    <span class="token punctuation">}</span>    copyed_objs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> target<span class="token punctuation">:</span> target<span class="token punctuation">,</span> copyTarget<span class="token punctuation">:</span> obj <span class="token punctuation">}</span><span class="token punctuation">)</span>    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>      <span class="token punctuation">}</span>      obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">_deepCopy</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> obj  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">_deepCopy</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>copyed_objs 这个数组存放的是已经递归过的目标对象。在递归一个目标对象之前，我们应该检查这个数组，如果当前目标对象和 copyed_objs 中的某个对象相等，那么不对其递归。</p><h2 id="Typeof"><a href="#Typeof" class="headerlink" title="Typeof"></a>Typeof</h2><blockquote><p>typeof 对于基本类型，除了 null 都可以显示正确的类型</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">typeof</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">//'number'</span><span class="token keyword">typeof</span> <span class="token string">'1'</span> <span class="token comment" spellcheck="true">//'string'</span><span class="token keyword">typeof</span> undefined <span class="token comment" spellcheck="true">//'undefined'</span><span class="token keyword">typeof</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">//'boolean'</span><span class="token keyword">typeof</span> <span class="token function">symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//'symbol'</span><span class="token keyword">typeof</span> b <span class="token comment" spellcheck="true">//'undefined'</span></code></pre><blockquote><p>typeof 对于对象，除了函数都会显示 object</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//'object'</span><span class="token keyword">typeof</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//'object'</span><span class="token keyword">typeof</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//'function'</span></code></pre><blockquote><p>对于 null 来说，虽然他是基本类型，但是会显示 object</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">typeof</span> <span class="token keyword">null</span> <span class="token comment" spellcheck="true">//'object'</span></code></pre><blockquote><p>PS：为什么会出现这种情况呢？因为在 JS 的最初版本中，使用的是 32 位系统，为了性能考虑使用低位存储了变量的类型信息，000 开头代表是对象，然而 null 表示为全零，所以将它错误的判断为 object 。虽然现在的内部类型判断代码已经改变了，但是对于这个 Bug 却是一直流传下来。</p></blockquote><ul><li>如果我们想获得一个变量的正确类型，可以通过 Object.prototype.toString.call(xx)。这样我们就可以获得类似 [object Type] 的字符串</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> a<span class="token comment" spellcheck="true">// 我们也可以这样判断 undefined</span>a <span class="token operator">===</span> undefined<span class="token comment" spellcheck="true">// 但是 undefined 不是保留字，能够在低版本浏览器被赋值</span><span class="token keyword">let</span> undefined <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true">// 这样判断就会出错</span><span class="token comment" spellcheck="true">// 所以可以用下面的方式来判断，并且代码量更少</span><span class="token comment" spellcheck="true">// 因为 void 后面随便跟上一个组成表达式</span><span class="token comment" spellcheck="true">// 返回就是 undefined</span>a <span class="token operator">===</span> <span class="token keyword">void</span> <span class="token number">0</span></code></pre><blockquote><p>null 和 undefined 的区别</p><blockquote><p>null 表示“没有对象”，即此处不应该有值</p></blockquote></blockquote><pre><code>典型用法：    （1）作为函数的参数，表示该函数的参数不是对象    （2）作为对象原型链的终点</code></pre><p>eg：Object.getPrototypeOf(Object.prototype)</p><p>undefined 表示“缺少值”，就是此处应该有一个值，但是还没有定义<br>典型用法：<br>（1）变量被声明了，但没有赋值时，就等于 undefined<br>（2）调用函数时，应该提供的参数没有提供，该参数等于 undefined<br>（3）对象没有赋值的属性，该属性的值为 undefined<br>（4）函数没有返回值时，默认返回 undefined</p><pre class=" language-js"><code class="language-js">ar i<span class="token punctuation">;</span>i <span class="token comment" spellcheck="true">// undefined</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// undefined</span><span class="token keyword">var</span>  o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>o<span class="token punctuation">.</span>p <span class="token comment" spellcheck="true">// undefined</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>x <span class="token comment" spellcheck="true">// undefined</span></code></pre><p>送大家一张图，便于记忆：<br><img src="/meme/type.jpg" alt="Eric 真帅!"></p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><h3 id="转-Boolean"><a href="#转-Boolean" class="headerlink" title="转 Boolean"></a>转 Boolean</h3><blockquote><p>在条件判断时，除了 undefined，null，false，NaN，’’，0，-0，其他所有值都转为 true，包括所有对象</p></blockquote><h3 id="对象转基本类型"><a href="#对象转基本类型" class="headerlink" title="对象转基本类型"></a>对象转基本类型</h3><blockquote><p>对象在转换基本类型时，首先会调用 valueOf 然后调用 toString。并且这两个方法你是可以重写的</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">''</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="四则运算符"><a href="#四则运算符" class="headerlink" title="四则运算符"></a>四则运算符</h3><blockquote><p>只有当加法运算时，其中一方是字符串类型，就会把另一个也转为字符串类型。其他运算只要其中一方是数字，那另一方就转为数字。并且加法运算会触发三种类型转换：将值转换为原始值，转换为数字，转换为字符串</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token number">1</span> <span class="token operator">+</span> <span class="token string">'1'</span> <span class="token comment" spellcheck="true">// '11'</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token string">'2'</span> <span class="token comment" spellcheck="true">// 4</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// '1,22,1'</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">'1,2'</span><span class="token string">'1,2'</span> <span class="token operator">+</span> <span class="token string">'2,1'</span> <span class="token operator">=</span> <span class="token string">'1,22,1'</span></code></pre><blockquote><p>对于加号需要注意这个表达式 ‘a’ ++ ‘b’</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token string">'a'</span> <span class="token operator">++</span> <span class="token string">'b'</span> <span class="token comment" spellcheck="true">// ->'aNaN'</span><span class="token comment" spellcheck="true">//因为+'b' -> NaN</span><span class="token operator">+</span> <span class="token string">'1'</span> <span class="token comment" spellcheck="true">// -> 1</span></code></pre><h3 id="操作符"><a href="#操作符" class="headerlink" title="==操作符"></a>==操作符</h3><blockquote><p>为什么[]==![] // -&gt; true</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//[]转成true，然后取反边变成false</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token comment" spellcheck="true">//然后</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token function">ToNumber</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token comment" spellcheck="true">//然后</span><span class="token function">ToPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token comment" spellcheck="true">// [].toString() -> ''</span><span class="token string">''</span> <span class="token operator">==</span> <span class="token number">0</span></code></pre><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><ul><li>如果是对象，就通过 toPrimitive 转换对象</li><li>如果是字符串，就通过 unicode 字符索引来比较</li></ul><h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><ul><li>每个函数都有 prototype 属性，除了 Function.prototype.bind(),该属性指向原型</li><li>每个对象都有<em>proto</em>属性,指向了创建该对象的构造函数的原型。其实这个属性指向了[[prototype]]，但是[[prototype]]是内部属性，我们并不能访问到，所以使用<em>proto</em>来访问</li><li>对象可以通过<em>proto</em>来寻找不属于该对象的属性，<em>proto</em>将对象连接起来组成了原型链</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快乐开发的必备小知识点</title>
      <link href="/2021/02/13/kuai-le-kai-fa-de-bi-bei-xiao-zhi-shi-dian/"/>
      <url>/2021/02/13/kuai-le-kai-fa-de-bi-bei-xiao-zhi-shi-dian/</url>
      
        <content type="html"><![CDATA[<h2 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h2><p>对于开发同学来说，一款优秀的终端软件是拥有高效的必备利器。这里我为大家奉上 oh-my-zsh 这款开源神器。优点嘛大家可以自行百度，这里我就不一一赘述了。直接上安装方法：</p><pre class=" language-bash"><code class="language-bash">$ sh -c <span class="token string">"<span class="token variable"><span class="token variable">$(</span>curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="token variable">)</span></span>"</span>$ sh -c <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">wget</span> https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -<span class="token variable">)</span></span>"</span></code></pre><p>oh-my-zsh 提供大量主题，我们在~/.zshrc 中可以配置，同时，在这里也支持自定义的 alias<br>这里我使用的主题是 ys，配上我的终端截图：<br><img src="/shootcut/item.png" alt="Eric 真帅!"><br>oh-my-zsh 有其自带的 git 命令哈，有兴趣的可以去了解一下<br><img src="/shootcut/example.png" alt="Eric 真帅!"><br>gco + branch 就是 git checkout<br>gcm 就是 git checkout master<br>另外多 bb 一条，输入 oh-my-zsh 中输入下面命令后：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> config --global alias.lg <span class="token string">"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an %ae>%Creset' --abbrev-commit"</span></code></pre><p>在终端输入 g lg 即可看到漂亮简洁的 git log 了<br><img src="/shootcut/glg.png" alt="Eric 真帅!"></p><h2 id="ClashShell"><a href="#ClashShell" class="headerlink" title="ClashShell"></a>ClashShell</h2><p>像 Clash、Shadowrocket 一类的软件想必大家都不陌生了。但是该类软件基本只支持在 macOS、windows、Linux（有图形化界面）的操作系统下运行。这里我偶然发现了一款 shellClash,支持在终端使用 clash 代理，老规矩，直接上链接：</p><pre class=" language-bash"><code class="language-bash">$ sh -c <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">wget</span> https://github.com/juewuy/ShellClash/blob/master/install.sh<span class="token variable">)</span></span>"</span></code></pre><h2 id="uTools"><a href="#uTools" class="headerlink" title="uTools"></a>uTools</h2><p>uTools 是我用过的最平滑的桌面软件。对于用户来说简单易上手，是一个极简、插件化、跨平台的现代桌面软件。通过自由选配丰富的插件，打造你得心应手的工具集合。一旦你熟悉它后，除了能够为你节约大量时间，不中断、无干扰，让你可以更加专注地改变世界。（照搬官网的原话，不过好用的真滴好用，强烈推荐！）</p><h2 id="nvm-node-版本管理"><a href="#nvm-node-版本管理" class="headerlink" title="nvm node 版本管理"></a>nvm node 版本管理</h2><p>这里强烈为大家推荐一个非常好用的 node 版本管理工具 nvm，它的最强之处在于 node 的版本管理，作为前端扫地僧，常常因为项目不同，node 的版本也需要跟着项目变动，这里如果使用 nvm 的话，一键切换，一键指定版本安装。talk is useless,快去亲自感受一下吧！这里我们可以使用以下两种方式安装：</p><pre class=" language-bash"><code class="language-bash">$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh <span class="token operator">|</span> <span class="token function">bash</span>$ <span class="token function">wget</span> -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh <span class="token operator">|</span> <span class="token function">bash</span></code></pre><p>查看 nvm 是否安装成功</p><pre class=" language-bash"><code class="language-bash">$ nvm -v</code></pre><p>这里附上 nvm 的常用命令：</p><pre class=" language-bash"><code class="language-bash">$ nvm <span class="token function">install</span> 6.9.4$ nvm list$ nvm uninstall$ nvm ls-remote //列出远程服务器上所有可用的版本（非windows用户）$ nvm <span class="token function">ls</span> available //windows用户$ nvm <span class="token function">install</span> node--reinstall-packages-from<span class="token operator">=</span>node //安装最新版node</code></pre>]]></content>
      
      
      <categories>
          
          <category> 快乐开发的必备小知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高效开发 </tag>
            
            <tag> item（zsh） </tag>
            
            <tag> vpn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客建站（小白建站旅程）</title>
      <link href="/2021/02/09/hexo-bo-ke-jian-zhan-xiao-bai-jian-zhan-lu-cheng/"/>
      <url>/2021/02/09/hexo-bo-ke-jian-zhan-xiao-bai-jian-zhan-lu-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><p>因为 hexo 是基于 node 环境，所以这里我们先安装 node.我本人是使用腾讯云的 centos 搭建，所以这里选择使用 yum.这里我们先安装 EPEL 库</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> yum <span class="token function">install</span> epel-release</code></pre><p>再从官网库下载安装</p><pre class=" language-bash"><code class="language-bash">$ yum <span class="token function">install</span> nodejs</code></pre><p>node 安装好了，当然是我们的猪脚登场啦!全局安装我们的 hexo 脚手架</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-cli -g</code></pre><h3 id="nvm-node-版本管理"><a href="#nvm-node-版本管理" class="headerlink" title="nvm node 版本管理"></a>nvm node 版本管理</h3><p>这里强烈为大家推荐一个非常好用的 node 版本管理工具 nvm，它的最强之处在于 node 的版本管理，作为前端扫地僧，常常因为项目不同，node 的版本也需要跟着项目变动，这里如果使用 nvm 的话，一键切换，一键指定版本安装。talk is useless,快去亲自感受一下吧！这里我们可以使用以下两种方式安装：</p><pre class=" language-bash"><code class="language-bash">$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh <span class="token operator">|</span> <span class="token function">bash</span>$ <span class="token function">wget</span> -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh <span class="token operator">|</span> <span class="token function">bash</span></code></pre><p>查看 nvm 是否安装成功</p><pre class=" language-bash"><code class="language-bash">$ nvm -v</code></pre><p>这里附上 nvm 的常用命令：</p><pre class=" language-bash"><code class="language-bash">$ nvm <span class="token function">install</span> 6.9.4$ nvm list$ nvm uninstall$ nvm ls-remote //列出远程服务器上所有可用的版本（非windows用户）$ nvm <span class="token function">ls</span> available //windows用户$ nvm <span class="token function">install</span> node--reinstall-packages-from<span class="token operator">=</span>node //安装最新版node</code></pre><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><p>既然环境已经完成，搓搓小手，开始我们的博客搭建旅程~<br>初始化我们的博客项目</p><pre class=" language-bash"><code class="language-bash">$ hexo init name //不要傻傻的填name哦，这里是你创建的博客项目的名字</code></pre><p>初始化完成以后，我们 cd 进去。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> i</code></pre><p>然后！这里开始我们 hexo 博客的第一个需要烂熟于心的命令！</p><pre class=" language-bash"><code class="language-bash">$ hexo g</code></pre><p>这里全写就是 hexo generate，让 hexo 脚手架生成静态页面，你会在目录下新发现一个 public 文件夹，它就是你的第一个博客宝宝！</p><p>号外号外：顺带提一嘴，npm install 可以直接写成 npm i，使用 yarn 的话，yarn install 可以写为 yarn ！<br><img src="/meme/detail.jpg" alt="Eric 真帅!"></p><p>ok！现在我们的博客页面已经生成好了，当然是机动人心的 start 环节，当当当当~</p><pre class=" language-bash"><code class="language-bash">$ hexo s</code></pre><p>哈哈，你以为 s 是 start？你错了，这里我们运行的是 hexo server。ps：我也是在看 hexo 官网才发现的<br><img src="/meme/nothin.jpg" alt="Eric 真帅!"></p><h2 id="哦！恭喜你，你的第一个博客已经搭建好了"><a href="#哦！恭喜你，你的第一个博客已经搭建好了" class="headerlink" title="哦！恭喜你，你的第一个博客已经搭建好了"></a>哦！恭喜你，你的第一个博客已经搭建好了</h2><p>根据命令行提示，访问本机 IP:4000 即可，进去之后就是 hexo 的默认界面啦，里面会有一篇经典的 hello world。当然咯，默认的主题，色调都会比较简陋啦，想不想拥有像我一样的漂亮主题？想不想像我一样有一个漂亮的 2d 人物？这里我就不一一 教大家了，贴上链接，大家上手以后就多看看啦。<br><a href="https://hexo.io/themes/" title="https://mdnice.com/">hexo 主题</a><br><a href="https://www.markdown.xyz/basic-syntax/" title="https://www.markdown.xyz/basic-syntax/">Markdown 中文指南</a><br><a href="https://hexo.io/zh-cn/docs/" title="https://hexo.io/zh-cn/docs/">hexo 中文文档</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
